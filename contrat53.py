import pandas as pd
from tkinter import Tk, Label, Button, Canvas, Entry, Frame, StringVar, OptionMenu, Toplevel, Listbox, END
from tkinter.filedialog import askopenfilename, askdirectory
from PIL import Image, ImageTk, ImageEnhance  
import tkinter as tk
from tkinter import messagebox
from tkinter import ttk
from tkcalendar import Calendar
from functools import partial
from datetime import datetime
import json
import os
import subprocess
import pyautogui
import threading
import time
from threading import Thread  # Import ajout√© pour g√©rer les threads
from datetime import datetime
import gestion_contrats1
from generer_virement import generer_xml_virements  # Import de la fonction
from config import charger_file_paths, get_file_path, ensure_path_exists, update_path, file_paths, SETTINGS_FILE


BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Charger les chemins au d√©marrage
charger_file_paths()

factures_path = get_file_path("dossier_factures", verify_exists=True, create_if_missing=True)
bulletins_path = get_file_path("bulletins_salaire", verify_exists=True, create_if_missing=True)



# V√©rifier que les chemins sont bien disponibles
if not factures_path:
    print("‚ö†Ô∏è Erreur : Le chemin des factures n'est pas d√©fini.")
else:
    print(f"üìÇ Dossier Factures trouv√© : {factures_path}")

if not bulletins_path:
    print("‚ö†Ô∏è Erreur : Le chemin des bulletins de salaire n'est pas d√©fini.")
else:
    print(f"üìÇ Dossier Bulletins de salaire trouv√© : {bulletins_path}")

# Remplacer les chemins hardcod√©s par les r√©f√©rences √† get_file_path
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

pyautogui.FAILSAFE = False
current_frame = None  # Cette variable sera utilis√©e pour communiquer entre les fonctions


# Fichier pour sauvegarder les chemins de fichiers
chemin_script_virement = "/Users/vincentperreard/script contrats/generer_virement.py"



# Coordonn√©es des boutons (√† ajuster si besoin)
x_oui, y_oui = 936, 455  # Coordonn√©es du bouton "Oui"
x_ok, y_ok = 946, 420    # Coordonn√©es du bouton "OK"



from bulletins import show_bulletins, show_bulletins_in_frame, show_details_in_frame


if not bulletins_path:
    print("‚ö†Ô∏è Erreur : Le chemin des bulletins de salaire n'est pas d√©fini.")
else:
    print(f"üìÇ Dossier Bulletins de salaire trouv√© : {bulletins_path}")

# Assurer que toutes les cl√©s existent dans file_paths avant utilisation
keys_to_check = ["pdf_mar", "pdf_iade", "excel_mar", "excel_iade", "word_mar", "word_iade", 
                 "bulletins_salaire", "dossier_factures", "excel_salaries"]
for key in keys_to_check:
    if key not in file_paths:
        file_paths[key] = ""

def ensure_directory_exists(directory_path):
    """Cr√©e le dossier s'il n'existe pas."""
    expanded_path = os.path.expanduser(directory_path)
    if not os.path.exists(expanded_path):
        os.makedirs(expanded_path)
        print(f"üìÇ Dossier cr√©√© √† : {expanded_path}")
    return expanded_path



if factures_path:
    print(f"üìÇ Dossier 'Frais_Factures' disponible √† : {factures_path}")


"""V√©rifie et cr√©e le dossier Bulletins de salaire si n√©cessaire."""
bulletins_path = file_paths.get("bulletins_salaire", "~/Documents/Bulletins_Salaire")
bulletins_path = os.path.expanduser(bulletins_path)  # G√®re les chemins avec ~

if not os.path.exists(bulletins_path):
    os.makedirs(bulletins_path)
    print(f"üìÇ Dossier 'Bulletins de salaire' cr√©√© √† : {bulletins_path}")
else:
    print(f"üìÇ Le dossier 'Bulletins de salaire' existe d√©j√† √† : {bulletins_path}")


# Style pour les boutons
button_style = {
    "font": ("Arial", 14, "bold"),
    "bg": "#007ACC",
    "fg": "black",
    "width": 30,
    "height": 2,
    "borderwidth": 3,
    "relief": "raised"
}

def open_parameters():
    """Fen√™tre pour modifier les chemins de fichiers et g√©rer les listes."""
    # Nettoyer le panneau droit
    clear_right_frame()
    
    # Conteneur principal - utilisation d'un PanedWindow pour diviser l'espace
    main_container = tk.PanedWindow(right_frame, orient=tk.HORIZONTAL)
    main_container.pack(fill="both", expand=True)
    
    # Cadre gauche pour le menu des param√®tres
    params_menu_frame = tk.Frame(main_container, bg="#f0f4f7", padx=20, pady=20)
    main_container.add(params_menu_frame, width=300)  # Largeur fixe pour le menu
    
    # Cadre droit pour l'affichage des fonctionnalit√©s (initialement vide)
    content_container = tk.Frame(main_container, bg="#f5f5f5", padx=20, pady=20)
    main_container.add(content_container, width=900)  # Plus de place pour le contenu
    
    # Titre du menu des param√®tres
    tk.Label(params_menu_frame, text="‚öôÔ∏è Param√®tres", font=("Arial", 14, "bold"), 
             bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Boutons du menu
    tk.Button(params_menu_frame, text="üîÑ Chemins des fichiers", 
              command=lambda: display_file_paths_in_container(content_container),
              width=25, bg="#DDDDDD", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=10)
    
    tk.Button(params_menu_frame, text="üë®‚Äç‚öïÔ∏è Gestion MARS titulaires", 
              command=lambda: display_mars_titulaires_in_container(content_container),
              width=25, bg="#DDDDDD", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=10)
    
    tk.Button(params_menu_frame, text="ü©∫ Gestion MARS rempla√ßants", 
              command=lambda: display_mars_remplacants_in_container(content_container),
              width=25, bg="#DDDDDD", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=10)
    
    tk.Button(params_menu_frame, text="üíâ Gestion IADE rempla√ßants", 
              command=lambda: display_iade_remplacants_in_container(content_container),
              width=25, bg="#DDDDDD", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=10)
    
    tk.Button(params_menu_frame, text="üë• Gestion des salari√©s", 
              command=lambda: display_salaries_in_container(content_container),
              width=25, bg="#DDDDDD", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=10)
    
    tk.Button(params_menu_frame, text="üìù Param√®tres DocuSign", 
              command=lambda: display_docusign_in_container(content_container),
              width=25, bg="#DDDDDD", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=10)
    
    # Retour au menu principal
    tk.Button(params_menu_frame, text="üîô Retour au menu principal", 
              command=lambda: [clear_right_frame(), show_welcome_image()], 
              width=25, bg="#BBBBBB", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=20)
    
    # Afficher un message d'accueil initial dans le conteneur de droite
    tk.Label(content_container, text="‚öôÔ∏è Bienvenue dans les param√®tres", 
             font=("Arial", 16, "bold"), fg="#4a90e2", bg="#f5f5f5").pack(pady=20)
    tk.Label(content_container, text="S√©lectionnez une option dans le menu de gauche pour configurer l'application.", 
             font=("Arial", 12), bg="#f5f5f5").pack(pady=10)

def display_file_paths_in_container(container):
    """Affiche l'interface de modification des chemins dans le conteneur sp√©cifi√©."""
    # Vider le conteneur
    for widget in container.winfo_children():
        widget.destroy()
    
    # Charger les param√®tres depuis config.json
    config_file = "config.json"
    if not os.path.exists(config_file):
        config = {"bank_url": "https://espacepro.secure.lcl.fr/", "bank_id": ""}
    else:
        with open(config_file, "r") as f:
            config = json.load(f)

    # Variables pour stocker les entr√©es
    bank_url_var = StringVar(value=config.get("bank_url", "https://espacepro.secure.lcl.fr/"))
    bank_id_var = StringVar(value=config.get("bank_id", ""))
    
    # Titre
    tk.Label(container, text="üîÑ Configuration des chemins de fichiers", 
           font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Cadre principal avec scrollbar pour g√©rer beaucoup de chemins
    main_frame = tk.Frame(container, bg="#f5f5f5")
    main_frame.pack(fill="both", expand=True, padx=10, pady=10)
    
    # Ajouter une scrollbar si n√©cessaire
    canvas = tk.Canvas(main_frame, bg="#f5f5f5")
    scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = tk.Frame(canvas, bg="#f5f5f5")
    
    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )
    
    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)
    
    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")
    
    paths = [
        ("Chemin Excel MAR :", "excel_mar"),
        ("Chemin Excel IADE :", "excel_iade"),
        ("Chemin Word MAR :", "word_mar"),
        ("Chemin Word IADE :", "word_iade"),
        ("Dossier PDF Contrats MAR :", "pdf_mar"),
        ("Dossier PDF Contrats IADE :", "pdf_iade"),
        ("Dossier Bulletins de salaire :", "bulletins_salaire"),
        ("Dossier Frais/Factures :", "dossier_factures"),
        ("Chemin Excel Salari√©s :", "excel_salaries"),
    ]
    
    # Dictionnaire pour stocker les variables de chaque chemin
    path_vars = {}
    
    def select_path(var, key):
        """S√©lectionne un fichier ou un dossier selon le type de chemin."""
        print(f"üìÇ DEBUG : select_path() appel√© pour {key}")  # ‚úÖ Ajout d'un print pour debug

        if key in ["pdf_mar", "pdf_iade", "bulletins_salaire", "dossier_factures"]:
            # ‚úÖ Pour les dossiers, utiliser askdirectory()
            path = filedialog.askdirectory(title="S√©lectionnez un dossier")
        else:
            # ‚úÖ Pour les fichiers, utiliser askopenfilename()
            path = filedialog.askopenfilename(title="S√©lectionnez un fichier")

        if path:  # ‚úÖ V√©rifier qu'un chemin a √©t√© s√©lectionn√©
            print(f"üìÇ DEBUG : Nouveau chemin s√©lectionn√© : {path}")  # ‚úÖ V√©rification du retour
            var.set(path)
    
    row_index = 0
    for label_text, key in paths:
        path_vars[key] = StringVar(value=file_paths.get(key, ""))
        ttk.Label(scrollable_frame, text=label_text, font=("Arial", 11)).grid(row=row_index, column=0, sticky="w", pady=3)
        ttk.Entry(scrollable_frame, textvariable=path_vars[key], width=60).grid(row=row_index, column=1, sticky="w", pady=3)
        ttk.Button(scrollable_frame, text="‚Ä¶", command=partial(select_path, path_vars[key], key)).grid(row=row_index, column=2, padx=5, pady=3)
        row_index += 1
    
    # Section pour les param√®tres bancaires
    row_index += 1
    ttk.Label(scrollable_frame, text="Param√®tres bancaires", font=("Arial", 12, "bold")).grid(row=row_index, column=0, columnspan=3, pady=10)
    
    row_index += 1
    ttk.Label(scrollable_frame, text="URL de la banque :").grid(row=row_index, column=0, sticky="w", pady=5)
    ttk.Entry(scrollable_frame, textvariable=bank_url_var, width=60).grid(row=row_index, column=1, pady=5)
    
    row_index += 1
    ttk.Label(scrollable_frame, text="Identifiant bancaire :").grid(row=row_index, column=0, sticky="w", pady=5)
    ttk.Entry(scrollable_frame, textvariable=bank_id_var, width=60).grid(row=row_index, column=1, pady=5)
    
    # Fonction pour sauvegarder les param√®tres
    def save_parameters():
        """Sauvegarde les param√®tres dans file_paths.json et config.json"""
        
        # Mise √† jour des chemins de fichiers
        for key, var in path_vars.items():
            file_paths[key] = var.get()

        # Mise √† jour des param√®tres bancaires
        config["bank_url"] = bank_url_var.get()
        config["bank_id"] = bank_id_var.get()

        try:
            # Sauvegarde des chemins de fichiers
            with open(SETTINGS_FILE, "w") as f:
                json.dump(file_paths, f, indent=4)
            print("‚úÖ Param√®tres des fichiers sauvegard√©s avec succ√®s.")
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde des fichiers : {e}")
            messagebox.showerror("Erreur", f"Impossible de sauvegarder les chemins des fichiers : {e}")

        try:
            # Sauvegarde des param√®tres bancaires
            with open(config_file, "w") as f:
                json.dump(config, f, indent=4)
            print("‚úÖ Param√®tres bancaires sauvegard√©s avec succ√®s.")
            
            # Afficher un message de succ√®s
            messagebox.showinfo("Succ√®s", "Les param√®tres ont √©t√© sauvegard√©s avec succ√®s.")
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde des param√®tres bancaires : {e}")
            messagebox.showerror("Erreur", f"Impossible de sauvegarder les param√®tres bancaires : {e}")

    # Boutons de sauvegarde
    buttons_frame = tk.Frame(container, bg="#f5f5f5")
    buttons_frame.pack(fill="x", pady=10)
    
    tk.Button(buttons_frame, text="üíæ Enregistrer", command=save_parameters, 
             bg="#4caf50", fg="black", font=("Arial", 12, "bold")).pack(side="right", padx=10)


# Fonctions pour afficher chaque type de param√®tre dans le conteneur
def display_mars_titulaires_in_container(container):
    """Affiche la gestion des MARS titulaires dans le conteneur."""
    # Vider le conteneur
    for widget in container.winfo_children():
        widget.destroy()
    
    # Cr√©er un cadre pour la gestion des MARS titulaires
    frame = tk.Frame(container, bg="#f5f5f5", padx=20, pady=20)
    frame.pack(fill="both", expand=True)
    
    # Titre
    tk.Label(frame, text="üë®‚Äç‚öïÔ∏è Gestion des MARS titulaires", 
             font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    try:
        # Chargement des donn√©es depuis la bonne feuille
        mars_titulaires = pd.read_excel(file_paths["excel_mar"], sheet_name="MARS SELARL")
        
        # Cadre principal
        main_frame = tk.Frame(frame, bg="#f5f5f5")
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Cr√©er une listbox pour afficher les MARS titulaires
        listbox = tk.Listbox(main_frame, width=50, height=15, font=("Arial", 12))
        listbox.pack(side="left", fill="both", expand=True, padx=5, pady=10)
        
        # Ajouter une scrollbar
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=listbox.yview)
        scrollbar.pack(side="right", fill="y")
        listbox.config(yscrollcommand=scrollbar.set)
        
        # Variable pour stocker les donn√©es
        mars_data = []
        
        def refresh_listbox():
            """Met √† jour la liste des MARS affich√©e dans la Listbox."""
            listbox.delete(0, tk.END)
            mars_data.clear()
            
            for _, row in mars_titulaires.iterrows():
                nom = row["NOM"] if not pd.isna(row["NOM"]) else ""
                prenom = row["PRENOM"] if not pd.isna(row["PRENOM"]) else ""
                full_name = f"{nom} {prenom}".strip()
                mars_data.append(row)
                listbox.insert(tk.END, full_name)
        
        # Remplir la listbox initialement
        refresh_listbox()
        
        # Fonctions pour les boutons
        def on_modify():
            """Modifier un MAR titulaire."""
            selected_index = listbox.curselection()
            if not selected_index:
                messagebox.showwarning("Avertissement", "Veuillez s√©lectionner un m√©decin.")
                return
            
            selected_index = selected_index[0]
            selected_row = mars_data[selected_index]
            
            # Cr√©er une fen√™tre de modification
            modify_window = tk.Toplevel(container)
            modify_window.title("Modifier un MAR titulaire")
            modify_window.geometry("400x400")
            modify_window.grab_set()  # Rendre la fen√™tre modale
            
            # Variables pour les champs
            nom_var = StringVar(value=selected_row["NOM"] if not pd.isna(selected_row["NOM"]) else "")
            prenom_var = StringVar(value=selected_row["PRENOM"] if not pd.isna(selected_row["PRENOM"]) else "")
            ordre_var = StringVar(value=selected_row["N ORDRE"] if not pd.isna(selected_row["N ORDRE"]) else "")
            email_var = StringVar(value=selected_row["EMAIL"] if not pd.isna(selected_row["EMAIL"]) else "")
            iban_var = StringVar(value=selected_row.get("IBAN", "") if not pd.isna(selected_row.get("IBAN", "")) else "")
            
            # Cr√©ation des champs
            padx, pady = 10, 5
            row = 0
            
            ttk.Label(modify_window, text="Nom:").grid(row=row, column=0, sticky="w", padx=padx, pady=pady)
            ttk.Entry(modify_window, textvariable=nom_var, width=30).grid(row=row, column=1, padx=padx, pady=pady)
            row += 1
            
            ttk.Label(modify_window, text="Pr√©nom:").grid(row=row, column=0, sticky="w", padx=padx, pady=pady)
            ttk.Entry(modify_window, textvariable=prenom_var, width=30).grid(row=row, column=1, padx=padx, pady=pady)
            row += 1
            
            ttk.Label(modify_window, text="N¬∞ Ordre:").grid(row=row, column=0, sticky="w", padx=padx, pady=pady)
            ttk.Entry(modify_window, textvariable=ordre_var, width=30).grid(row=row, column=1, padx=padx, pady=pady)
            row += 1
            
            ttk.Label(modify_window, text="Email:").grid(row=row, column=0, sticky="w", padx=padx, pady=pady)
            ttk.Entry(modify_window, textvariable=email_var, width=30).grid(row=row, column=1, padx=padx, pady=pady)
            row += 1
            
            ttk.Label(modify_window, text="IBAN:").grid(row=row, column=0, sticky="w", padx=padx, pady=pady)
            ttk.Entry(modify_window, textvariable=iban_var, width=30).grid(row=row, column=1, padx=padx, pady=pady)
            row += 1
            
            def save_changes():
                """Enregistre les modifications et met √† jour Excel."""
                # Mise √† jour des donn√©es
                mars_titulaires.loc[selected_index, "NOM"] = nom_var.get()
                mars_titulaires.loc[selected_index, "PRENOM"] = prenom_var.get()
                mars_titulaires.loc[selected_index, "N ORDRE"] = ordre_var.get()
                mars_titulaires.loc[selected_index, "EMAIL"] = email_var.get()
                
                # Ajouter IBAN s'il n'existe pas
                if "IBAN" not in mars_titulaires.columns:
                    mars_titulaires["IBAN"] = ""
                mars_titulaires.loc[selected_index, "IBAN"] = iban_var.get()
                
                try:
                    # Sauvegarde dans Excel
                    save_excel_with_updated_sheet(file_paths["excel_mar"], "MARS SELARL", mars_titulaires)
                    messagebox.showinfo("Succ√®s", "Modifications enregistr√©es avec succ√®s.")
                    
                    # Mise √† jour de l'affichage
                    refresh_listbox()
                    modify_window.destroy()
                except Exception as e:
                    messagebox.showerror("Erreur", f"Erreur lors de la sauvegarde : {e}")
            
            # Boutons de validation
            buttons_frame = tk.Frame(modify_window)
            buttons_frame.grid(row=row, column=0, columnspan=2, pady=15)
            
            ttk.Button(buttons_frame, text="Enregistrer", command=save_changes).pack(side="left", padx=10)
            ttk.Button(buttons_frame, text="Annuler", command=modify_window.destroy).pack(side="left", padx=10)
        
        def on_add():
            """Ajouter un nouveau MAR titulaire."""
            # Cr√©er une fen√™tre d'ajout
            add_window = tk.Toplevel(container)
            add_window.title("Ajouter un MAR titulaire")
            add_window.geometry("400x400")
            add_window.grab_set()  # Rendre la fen√™tre modale
            
            # Variables pour les champs
            nom_var = StringVar()
            prenom_var = StringVar()
            ordre_var = StringVar()
            email_var = StringVar()
            iban_var = StringVar()
            
            # Cr√©ation des champs
            padx, pady = 10, 5
            row = 0
            
            ttk.Label(add_window, text="Nom:").grid(row=row, column=0, sticky="w", padx=padx, pady=pady)
            ttk.Entry(add_window, textvariable=nom_var, width=30).grid(row=row, column=1, padx=padx, pady=pady)
            row += 1
            
            ttk.Label(add_window, text="Pr√©nom:").grid(row=row, column=0, sticky="w", padx=padx, pady=pady)
            ttk.Entry(add_window, textvariable=prenom_var, width=30).grid(row=row, column=1, padx=padx, pady=pady)
            row += 1
            
            ttk.Label(add_window, text="N¬∞ Ordre:").grid(row=row, column=0, sticky="w", padx=padx, pady=pady)
            ttk.Entry(add_window, textvariable=ordre_var, width=30).grid(row=row, column=1, padx=padx, pady=pady)
            row += 1
            
            ttk.Label(add_window, text="Email:").grid(row=row, column=0, sticky="w", padx=padx, pady=pady)
            ttk.Entry(add_window, textvariable=email_var, width=30).grid(row=row, column=1, padx=padx, pady=pady)
            row += 1
            
            ttk.Label(add_window, text="IBAN:").grid(row=row, column=0, sticky="w", padx=padx, pady=pady)
            ttk.Entry(add_window, textvariable=iban_var, width=30).grid(row=row, column=1, padx=padx, pady=pady)
            row += 1
            
            def save_new():
                """Enregistre le nouveau MAR et met √† jour Excel."""
                # V√©rification des champs obligatoires
                if not nom_var.get().strip() or not prenom_var.get().strip():
                    messagebox.showwarning("Attention", "Veuillez renseigner au moins le nom et le pr√©nom.")
                    return
                
                # Pr√©paration des nouvelles donn√©es
                new_row = {
                    "NOM": nom_var.get(),
                    "PRENOM": prenom_var.get(),
                    "N ORDRE": ordre_var.get(),
                    "EMAIL": email_var.get()
                }
                
                # Ajouter IBAN s'il n'existe pas
                if "IBAN" not in mars_titulaires.columns:
                    mars_titulaires["IBAN"] = ""
                new_row["IBAN"] = iban_var.get()
                
                try:
                    # Ajout au DataFrame
                    mars_titulaires.loc[len(mars_titulaires)] = new_row
                    
                    # Sauvegarde dans Excel
                    save_excel_with_updated_sheet(file_paths["excel_mar"], "MARS SELARL", mars_titulaires)
                    messagebox.showinfo("Succ√®s", "MAR titulaire ajout√© avec succ√®s.")
                    
                    # Mise √† jour de l'affichage
                    refresh_listbox()
                    add_window.destroy()
                except Exception as e:
                    messagebox.showerror("Erreur", f"Erreur lors de l'ajout : {e}")
            
            # Boutons de validation
            buttons_frame = tk.Frame(add_window)
            buttons_frame.grid(row=row, column=0, columnspan=2, pady=15)
            
            ttk.Button(buttons_frame, text="Ajouter", command=save_new).pack(side="left", padx=10)
            ttk.Button(buttons_frame, text="Annuler", command=add_window.destroy).pack(side="left", padx=10)
        
        def on_delete():
            """Supprimer un MAR titulaire."""
            selected_index = listbox.curselection()
            if not selected_index:
                messagebox.showwarning("Avertissement", "Veuillez s√©lectionner un m√©decin.")
                return
            
            selected_index = selected_index[0]
            selected_row = mars_data[selected_index]
            
            # Confirmation de suppression
            nom = selected_row["NOM"] if not pd.isna(selected_row["NOM"]) else ""
            prenom = selected_row["PRENOM"] if not pd.isna(selected_row["PRENOM"]) else ""
            full_name = f"{nom} {prenom}".strip()
            
            if messagebox.askyesno("Confirmation", f"Voulez-vous vraiment supprimer {full_name} ?"):
                try:
                    # Suppression de la ligne
                    mars_titulaires.drop(mars_titulaires.index[selected_index], inplace=True)
                    mars_titulaires.reset_index(drop=True, inplace=True)
                    
                    # Sauvegarde dans Excel
                    save_excel_with_updated_sheet(file_paths["excel_mar"], "MARS SELARL", mars_titulaires)
                    messagebox.showinfo("Succ√®s", f"{full_name} supprim√© avec succ√®s.")
                    
                    # Mise √† jour de l'affichage
                    refresh_listbox()
                except Exception as e:
                    messagebox.showerror("Erreur", f"Erreur lors de la suppression : {e}")
        
        # Boutons d'action
        buttons_frame = tk.Frame(frame, bg="#f5f5f5")
        buttons_frame.pack(pady=10)
        
        tk.Button(buttons_frame, text="‚ûï Ajouter", command=on_add, 
                 bg="#4caf50", fg="black", font=("Arial", 10, "bold")).pack(side="left", padx=10)
        tk.Button(buttons_frame, text="‚úèÔ∏è Modifier", command=on_modify, 
                 bg="#2196f3", fg="black", font=("Arial", 10, "bold")).pack(side="left", padx=10)
        tk.Button(buttons_frame, text="üóëÔ∏è Supprimer", command=on_delete, 
                 bg="#f44336", fg="black", font=("Arial", 10, "bold")).pack(side="left", padx=10)
    
    except Exception as e:
        tk.Label(frame, text=f"Erreur lors du chargement des donn√©es : {e}", 
                fg="red", bg="#f5f5f5", wraplength=600).pack(pady=20)


def display_mars_remplacants_in_container(container):
    """Affiche la gestion des MARS rempla√ßants dans le conteneur."""
    # Vider le conteneur
    for widget in container.winfo_children():
        widget.destroy()
    
    # Cr√©er un cadre pour la gestion des MARS rempla√ßants
    frame = tk.Frame(container, bg="#f5f5f5")
    frame.pack(fill="both", expand=True)
    
    # Titre
    tk.Label(frame, text="ü©∫ Gestion des MARS rempla√ßants", 
             font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Adaptez ici le contenu de votre fonction manage_mar_remplacants


def display_iade_remplacants_in_container(container):
    """Affiche la gestion des IADE rempla√ßants dans le conteneur."""
    # Vider le conteneur
    for widget in container.winfo_children():
        widget.destroy()
    
    # Cr√©er un cadre pour la gestion des IADE rempla√ßants
    frame = tk.Frame(container, bg="#f5f5f5")
    frame.pack(fill="both", expand=True)
    
    # Titre
    tk.Label(frame, text="üíâ Gestion des IADE rempla√ßants", 
             font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Adaptez ici le contenu de votre fonction manage_iade_remplacants


def display_salaries_in_container(container):
    """Affiche la gestion des salari√©s dans le conteneur."""
    # Vider le conteneur
    for widget in container.winfo_children():
        widget.destroy()
    
    # Cr√©er un cadre pour la gestion des salari√©s
    frame = tk.Frame(container, bg="#f5f5f5")
    frame.pack(fill="both", expand=True)
    
    # Titre
    tk.Label(frame, text="üë• Gestion des salari√©s", 
             font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Adaptez ici le contenu de votre fonction manage_salaries


def display_docusign_in_container(container):
    """Affiche les param√®tres DocuSign dans le conteneur."""
    # Vider le conteneur
    for widget in container.winfo_children():
        widget.destroy()
    
    # Cr√©er un cadre pour les param√®tres DocuSign
    frame = tk.Frame(container, bg="#f5f5f5")
    frame.pack(fill="both", expand=True)
    
    # Titre
    tk.Label(frame, text="üìù Param√®tres DocuSign", 
             font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Charger les identifiants depuis config.json
    config_file = "config.json"
    if not os.path.exists(config_file):
        config = {"docusign_login_page": "https://account.docusign.com", "docusign_email": "", "docusign_password": ""}
    else:
        with open(config_file, "r") as f:
            config = json.load(f)   
    
    # Variables pour stocker les entr√©es
    login_page_var = StringVar(value=config.get("docusign_login_page", "https://account.docusign.com"))
    email_var = StringVar(value=config.get("docusign_email", ""))
    password_var = StringVar(value=config.get("docusign_password", ""))
    
    # Cr√©ation des champs
    tk.Label(frame, text="Page de login DocuSign :").pack(pady=5)
    tk.Entry(frame, textvariable=login_page_var, width=50).pack(pady=5)
    
    tk.Label(frame, text="Email DocuSign :").pack(pady=5)
    tk.Entry(frame, textvariable=email_var, width=50).pack(pady=5)
    
    tk.Label(frame, text="Mot de passe (laisser vide si non stock√©) :").pack(pady=5)
    tk.Entry(frame, textvariable=password_var, width=50, show="*").pack(pady=5)
    
    # Fonction pour sauvegarder
    def save_docusign_settings():
        config["docusign_login_page"] = login_page_var.get()
        config["docusign_email"] = email_var.get()
        config["docusign_password"] = password_var.get()
        
        with open(config_file, "w") as f:
            json.dump(config, f, indent=4)
        
        messagebox.showinfo("Succ√®s", "Param√®tres DocuSign enregistr√©s.")
    
    # Bouton de sauvegarde
    tk.Button(frame, text="üíæ Enregistrer", command=save_docusign_settings,
             bg="#4caf50", fg="black", font=("Arial", 12, "bold")).pack(pady=20)    
    
        
def open_docusign_parameters():
    """Fen√™tre pour modifier les identifiants DocuSign et les enregistrer dans un fichier JSON."""
    param_window = Toplevel()
    param_window.title("Param√®tres DocuSign")
    param_window.geometry("500x300")

    # Charger les identifiants depuis config.json
    config_file = "config.json"
    if not os.path.exists(config_file):
        config = {"docusign_login_page": "https://account.docusign.com", "docusign_email": "", "docusign_password": ""}
    else:
        with open(config_file, "r") as f:
            config = json.load(f)    
    try:
        with open(config_file, "r") as f:
            config = json.load(f)
    except FileNotFoundError:
        config = {
            "docusign_login_page": "https://account.docusign.com",
            "docusign_email": "",
            "docusign_password": ""
        }

    # Variables pour stocker les entr√©es
    login_page_var = StringVar(value=config.get("docusign_login_page", "https://account.docusign.com"))
    email_var = StringVar(value=config.get("docusign_email", ""))
    password_var = StringVar(value=config.get("docusign_password", ""))

    # Cr√©ation des champs
    Label(param_window, text="Page de login DocuSign :").pack(pady=5)
    Entry(param_window, textvariable=login_page_var, width=50).pack(pady=5)

    Label(param_window, text="Email DocuSign :").pack(pady=5)
    Entry(param_window, textvariable=email_var, width=50).pack(pady=5)

    Label(param_window, text="Mot de passe (laisser vide si non stock√©) :").pack(pady=5)
    Entry(param_window, textvariable=password_var, width=50, show="*").pack(pady=5)

    # Fonction pour sauvegarder
    def save_docusign_settings():
        config["docusign_login_page"] = login_page_var.get()
        config["docusign_email"] = email_var.get()
        config["docusign_password"] = password_var.get()

        with open(config_file, "w") as f:
            json.dump(config, f, indent=4)

        messagebox.showinfo("Succ√®s", "Param√®tres DocuSign enregistr√©s.")
        param_window.destroy()

    # Boutons d'action
    Button(param_window, text="Enregistrer", command=save_docusign_settings).pack(pady=10)
    Button(param_window, text="Annuler", command=param_window.destroy).pack(pady=5)


def show_post_contract_actions(container, pdf_path, replaced_name, replacing_name, 
                            replaced_email, replacing_email, start_date, end_date, contract_type):
    """
    Affiche les options post-cr√©ation de contrat dans le conteneur sp√©cifi√©.
    """
    # Nettoyer le conteneur d'abord
    for widget in container.winfo_children():
        widget.destroy()
    
    # Titre
    tk.Label(container, text="Actions disponibles", font=("Arial", 14, "bold"), 
           bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Description
    tk.Label(container, text=f"Contrat g√©n√©r√© pour:\n{replacing_name}\nrempla√ßant {replaced_name}\n{start_date} - {end_date}", 
           font=("Arial", 10), justify=tk.LEFT, bg="#f5f5f5").pack(pady=10, anchor="w")
    
    
    def send_to_docusign_callback(pdf_path, contract_type, start_date, end_date, replacing_name, replacing_email, replaced_name=None, replaced_email=None):
        print("üîπ D√©but de la fonction send_to_docusign_callback()")

        # V√©rification et correction des valeurs None
        replaced_name = replaced_name if replaced_name else "Non pr√©cis√©"
        replaced_email = replaced_email if replaced_email else "email_inconnu@exemple.com"
        replacing_email = replacing_email if replacing_email and replacing_email not in ["", "nan", "None", None] else "email_inconnu@exemple.com"

        print(f"üì§ DEBUG Avant subprocess : replaced_name={replaced_name}, replaced_email={replaced_email}, replacing_name={replacing_name}, replacing_email={replacing_email}")

        # V√©rification finale avant ex√©cution
        if None in [pdf_path, replacing_name, replacing_email, start_date, end_date, contract_type]:
            print("‚ùå ERREUR : L'un des param√®tres essentiels est None, envoi annul√©.")
            return

        print(f"üì§ DEBUG Final avant envoi DocuSign :")
        print(f"   üîπ pdf_path = {pdf_path}")
        print(f"   üîπ contract_type = {contract_type}")
        print(f"   üîπ start_date = {start_date}")
        print(f"   üîπ end_date = {end_date}")
        print(f"   üîπ replacing_name = {replacing_name}")
        print(f"   üîπ replacing_email = {replacing_email}")
        print(f"   üîπ replaced_name = {replaced_name}")
        print(f"   üîπ replaced_email = {replaced_email}")

        # R√©cup√©rer le chemin du script DocuSign depuis config
        script_docusign = get_file_path("script_docusign")
        if not script_docusign:
            print("‚ùå ERREUR : Impossible de trouver le script DocuSign")
            return

        # Gestion sp√©cifique pour IADE (sans remplac√©)
        if contract_type == "IADE":
            args = [
                "python3", script_docusign,
                pdf_path, contract_type, start_date, end_date, replacing_name, replacing_email
            ]
        else:  # MAR et autres types
            args = [
                "python3", script_docusign,
                pdf_path, contract_type, start_date, end_date, replacing_name, replacing_email, replaced_name, replaced_email
            ]

        try:
            print("üöÄ Lancement de l'envoi √† DocuSign via subprocess...")
            subprocess.run(args, check=True)
            print("‚úÖ Envoi √† DocuSign termin√© avec succ√®s.")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'envoi √† DocuSign : {e}")


    # Titre
    tk.Label(container, text="Actions disponibles", font=("Arial", 14, "bold"), 
           bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Description
    tk.Label(container, text=f"Contrat g√©n√©r√© pour:\n{replacing_name}\nrempla√ßant {replaced_name}\n{start_date} - {end_date}", 
           font=("Arial", 10), justify=tk.LEFT, bg="#f5f5f5").pack(pady=10, anchor="w")
    
    # Bouton pour ouvrir le PDF
    def open_pdf():
        """Ouvre le contrat avec PDF Expert."""
        subprocess.run(["open", "-a", "PDF Expert", pdf_path])
    

    tk.Button(container, text="üìÑ Ouvrir avec PDF Expert", command=open_pdf, 
            width=30).pack(pady=5)
    

    # Bouton pour envoyer √† DocuSign
    tk.Button(container, text="üì© Envoyer en DocuSign", 
            command=send_to_docusign_callback, width=30).pack(pady=5)
    

    # Bouton pour effectuer le r√®glement (d√©sactiv√© comme dans votre code original)
    tk.Button(container, text="üí∞ Effectuer le r√®glement (√† venir)", 
            state="disabled", width=30).pack(pady=5)
    
    # Bouton pour revenir √† l'√©cran d'accueil
    tk.Button(container, text="üè† Retour √† l'accueil", 
            command=lambda: [clear_right_frame(), show_welcome_image()], 
            width=30).pack(pady=20)

def send_to_docusign(pdf_path, contract_type, start_date, end_date, replacing_name, replacing_email, replaced_email=None, replaced_name=None):
    """
    Envoie le fichier PDF g√©n√©r√© √† DocuSign en automatisant l'importation.

    Args:
        pdf_path (str): Chemin du fichier PDF √† envoyer.
        contract_type (str): Type du contrat ("IADE" ou "MAR").
        start_date (str): Date de d√©but du contrat.
        end_date (str): Date de fin du contrat.
        replacing_name (str): Nom du rempla√ßant.
        replacing_email (str): Email du rempla√ßant.
        replaced_name (str, optional): Nom du m√©decin remplac√© (pour MAR).
        replaced_email (str, optional): Email du m√©decin remplac√© (pour MAR).
    """

    # üîπ V√©rification des param√®tres obligatoires
    if not pdf_path or not os.path.exists(pdf_path):
        print(f"‚ùå Erreur : Le fichier PDF {pdf_path} n'existe pas.")
        return
    
    if not replacing_name or not replacing_email:
        print("‚ùå Erreur : Le nom ou l'email du rempla√ßant est manquant.")
        return
    
    # üîπ V√©rification des dates
    if not start_date or not end_date:
        print("‚ùå Erreur : Les dates du contrat ne sont pas d√©finies correctement.")
        return

    replacing_email = replacing_email if replacing_email and replacing_email not in ["", "nan", None] else "email_inconnu@exemple.com"
    replaced_email = replaced_email if replaced_email and replaced_email not in ["", "nan", None] else "email_inconnu@exemple.com"

    # üìå Debugging - V√©rification des param√®tres envoy√©s
    print(f"üì§ Envoi √† DocuSign...")
    print(f"   üìÑ Fichier : {pdf_path}")
    print(f"   üè∑Ô∏è Type de contrat : {contract_type}")
    print(f"   üìÜ P√©riode : {start_date} - {end_date}")
    print(f"   üë®‚Äç‚öïÔ∏è Rempla√ßant : {replacing_name} ({replacing_email})")
    print(f"üì§ DEBUG Avant envoi DocuSign :")
    print(f"   üîπ replaced_name = {replaced_name}")
    print(f"   üîπ replaced_email = {replaced_email}")
    print(f"   üîπ replacing_name = {replacing_name}")
    print(f"   üîπ replacing_email = {replacing_email}")

    # R√©cup√©rer le chemin du script DocuSign depuis config
    script_docusign = get_file_path("script_docusign")
    if not script_docusign:
        print("‚ùå ERREUR : Impossible de trouver le script DocuSign")
        return

    try:
        if contract_type == "MAR":
            print(f"üì§ DEBUG Avant subprocess : replaced_name={replaced_name}, replaced_email={replaced_email}, replacing_name={replacing_name}, replacing_email={replacing_email}")
            subprocess.run([
                "python3", script_docusign,
                pdf_path, contract_type, start_date, end_date, replacing_name, replacing_email, replaced_name, replaced_email
            ], check=True)

        
        elif contract_type == "IADE":
            subprocess.run([
                "python3", script_docusign,
                pdf_path, "IADE", start_date, end_date, replacing_name, replacing_email
            ], check=True)

        print("‚úÖ Contrat envoy√© avec succ√®s √† DocuSign.")

    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'envoi √† DocuSign : {e}")
    except Exception as e:
        print(f"‚ùå Erreur inattendue : {e}")


def manage_salaries():
    """Fen√™tre pour g√©rer la liste des salari√©s."""
    try:
        salaries_data = pd.read_excel(file_paths["excel_salaries"], sheet_name="Salari√©s")
    except Exception as e:
        messagebox.showerror("Erreur", f"Impossible de charger la liste des salari√©s : {e}")
        return

    def refresh_listbox():
        """Met √† jour la liste des salari√©s dans la Listbox."""
        listbox.delete(0, "end")
        for _, row in salaries_data.iterrows():
            listbox.insert("end", f"{row['NOM']} {row['PRENOM']}")

    def on_modify():
        """Modifier les informations du salari√© s√©lectionn√©."""
        try:
            selected_index = listbox.curselection()[0]
        except IndexError:
            messagebox.showwarning("Avertissement", "Veuillez s√©lectionner un salari√©.")
            return

        selected_row = salaries_data.iloc[selected_index]

        modify_window = Toplevel(window)
        modify_window.title("Modifier un salari√©")

        # Variables pour les champs
        nom_var = StringVar(value=selected_row["NOM"])
        prenom_var = StringVar(value=selected_row["PRENOM"])
        email_var = StringVar(value=selected_row["EMAIL"])
        poste_var = StringVar(value=selected_row.get("POSTE", ""))
        adresse_var = StringVar(value=selected_row.get("ADRESSE", ""))
        iban_var = StringVar(value=selected_row.get("IBAN", ""))

        fields = [
            ("Nom", nom_var),
            ("Pr√©nom", prenom_var),
            ("Email", email_var),
            ("Poste", poste_var),
            ("Adresse", adresse_var),
            ("IBAN", iban_var)
        ]

        for i, (label_text, var) in enumerate(fields):
            Label(modify_window, text=label_text + " :").grid(row=i, column=0, padx=10, pady=5)
            Entry(modify_window, textvariable=var).grid(row=i, column=1, padx=10, pady=5)

        def save_changes():
            salaries_data.loc[selected_index, "NOM"] = nom_var.get()
            salaries_data.loc[selected_index, "PRENOM"] = prenom_var.get()
            salaries_data.loc[selected_index, "EMAIL"] = email_var.get()
            salaries_data.loc[selected_index, "POSTE"] = poste_var.get()
            salaries_data.loc[selected_index, "ADRESSE"] = adresse_var.get()
            salaries_data.loc[selected_index, "IBAN"] = iban_var.get()

            try:
                save_excel_with_updated_sheet(file_paths["excel_salaries"], "Salari√©s", salaries_data)
                refresh_listbox()
                modify_window.destroy()
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible d'enregistrer les modifications : {e}")

        Button(modify_window, text="Enregistrer", command=save_changes).grid(row=len(fields), column=0, columnspan=2, pady=10)
        
    def on_delete():
        """Supprime un salari√© s√©lectionn√©."""
        try:
            selected_index = listbox.curselection()[0]
        except IndexError:
            messagebox.showwarning("Avertissement", "Veuillez s√©lectionner un salari√©.")
            return

        if not messagebox.askyesno("Confirmation", "√ätes-vous s√ªr de vouloir supprimer ce salari√© ?"):
            return

        salaries_data.drop(index=selected_index, inplace=True)
        salaries_data.reset_index(drop=True, inplace=True)

        try:
            save_excel_with_updated_sheet(file_paths["excel_salaries"], "Salari√©s", salaries_data)
            messagebox.showinfo("Succ√®s", "Salari√© supprim√©.")
            refresh_listbox()
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de supprimer le salari√© : {e}")

    def on_add():
        """Ajoute un nouveau salari√©."""
        add_window = Toplevel(window)
        add_window.title("Ajouter un salari√©")

        # Variables pour les champs
        nom_var = StringVar()
        prenom_var = StringVar()
        email_var = StringVar()
        poste_var = StringVar()
        adresse_var = StringVar()
        iban_var = StringVar()

        fields = [
            ("Nom", nom_var),
            ("Pr√©nom", prenom_var),
            ("Email", email_var),
            ("Poste", poste_var),
            ("Adresse", adresse_var),
            ("IBAN", iban_var)
        ]

        for i, (label_text, var) in enumerate(fields):
            Label(add_window, text=label_text + " :").grid(row=i, column=0, padx=10, pady=5)
            Entry(add_window, textvariable=var).grid(row=i, column=1, padx=10, pady=5)

        def save_new():
            new_row = {
                "NOM": nom_var.get(),
                "PRENOM": prenom_var.get(),
                "EMAIL": email_var.get(),
                "POSTE": poste_var.get(),
                "ADRESSE": adresse_var.get(),
                "IBAN": iban_var.get()
            }
            salaries_data.loc[len(salaries_data)] = new_row

            try:
                save_excel_with_updated_sheet(file_paths["excel_salaries"], "Salari√©s", salaries_data)
                refresh_listbox()
                add_window.destroy()
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible d'ajouter le salari√© : {e}")

        Button(add_window, text="Enregistrer", command=save_new).grid(row=len(fields), column=0, columnspan=2, pady=10)

    # Fen√™tre principale
    window = Toplevel()
    window.title("Liste des Salari√©s")
    window.geometry("550x500")

    # Titre
    Label(window, text="Liste des Salari√©s", font=("Arial", 16, "bold"), bg="#007ACC", fg="white").pack(fill="x", pady=10)

    # Liste des salari√©s
    listbox = Listbox(window, width=50, height=15, font=("Arial", 12))
    listbox.pack(pady=10)
    refresh_listbox()

    # Boutons d'actions
    Button(window, text="Modifier", command=on_modify, width=20, bg="#4caf50").pack(pady=5)
    Button(window, text="Ajouter", command=on_add, width=20, bg="#2196f3").pack(pady=5)
    Button(window, text="Supprimer", command=on_delete, width=20, bg="#f44336").pack(pady=5)
    Button(window, text="Retour", command=window.destroy, width=20, bg="#607d8b").pack(pady=10)

def manage_mar_titulaires():
    """Fen√™tre pour g√©rer la liste des MARS titulaires."""
    try:
        # Chargement des donn√©es depuis la bonne feuille
        mars_titulaires = pd.read_excel(file_paths["excel_mar"], sheet_name="MARS SELARL")
    except Exception as e:
        messagebox.showerror("Erreur", f"Impossible de charger la liste des MARS titulaires : {e}")
        return


    def refresh_listbox():
        """Met √† jour la liste des MARS titulaires dans la Listbox."""
        listbox.delete(0, "end")
        for _, row in mars_titulaires.iterrows():
            listbox.insert("end", f"{row['NOM']} {row['PRENOM']}")

    def on_modify():
        """Modifier les informations du m√©decin s√©lectionn√©."""
        try:
            selected_index = listbox.curselection()[0]
        except IndexError:
            messagebox.showwarning("Avertissement", "Veuillez s√©lectionner un m√©decin.")
            return

        selected_row = mars_titulaires.iloc[selected_index]

        modify_window = Toplevel(window)
        modify_window.title("Modifier un MAR titulaire")

        # Variables pour les champs
        nom_var = StringVar(value=selected_row["NOM"])
        prenom_var = StringVar(value=selected_row["PRENOM"])
        ordre_var = StringVar(value=selected_row["N ORDRE"])
        email_var = StringVar(value=selected_row["EMAIL"])
        iban_var = StringVar(value=selected_row.get("IBAN", ""))  # Ajout de l'IBAN

        Label(modify_window, text="Nom :").grid(row=0, column=0, padx=10, pady=5)
        Entry(modify_window, textvariable=nom_var).grid(row=0, column=1, padx=10, pady=5)

        Label(modify_window, text="Pr√©nom :").grid(row=1, column=0, padx=10, pady=5)
        Entry(modify_window, textvariable=prenom_var).grid(row=1, column=1, padx=10, pady=5)

        Label(modify_window, text="N¬∞ Ordre :").grid(row=2, column=0, padx=10, pady=5)
        Entry(modify_window, textvariable=ordre_var).grid(row=2, column=1, padx=10, pady=5)

        Label(modify_window, text="Email :").grid(row=3, column=0, padx=10, pady=5)
        Entry(modify_window, textvariable=email_var).grid(row=3, column=1, padx=10, pady=5)

        Label(modify_window, text="IBAN :").grid(row=4, column=0, padx=10, pady=5)
        Entry(modify_window, textvariable=iban_var).grid(row=4, column=1, padx=10, pady=5)

        def save_changes():
            mars_titulaires.loc[selected_index, "NOM"] = nom_var.get()
            mars_titulaires.loc[selected_index, "PRENOM"] = prenom_var.get()
            mars_titulaires.loc[selected_index, "N ORDRE"] = ordre_var.get()
            mars_titulaires.loc[selected_index, "EMAIL"] = email_var.get()
            mars_titulaires.loc[selected_index, "IBAN"] = iban_var.get()  # Sauvegarde de l'IBAN

            try:
                save_excel_with_updated_sheet(file_paths["excel_mar"], "MARS SELARL", mars_titulaires)
                refresh_listbox()
                modify_window.destroy()
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible d'enregistrer les modifications : {e}")

        Button(modify_window, text="Enregistrer", command=save_changes).grid(row=5, column=0, columnspan=2, pady=10)

    def on_delete():
        try:
            selected_index = listbox.curselection()[0]
        except IndexError:
            messagebox.showwarning("Avertissement", "Veuillez s√©lectionner un m√©decin.")
            return

        if not messagebox.askyesno("Confirmation", "√ätes-vous s√ªr de vouloir supprimer ce m√©decin ?"):
            return

        mars_titulaires.drop(index=selected_index, inplace=True)
        mars_titulaires.reset_index(drop=True, inplace=True)

        try:
            save_excel_with_updated_sheet(file_paths["excel_mar"], "MARS SELARL", mars_titulaires)

            messagebox.showinfo("Succ√®s", "M√©decin supprim√©.")
            refresh_listbox()
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de supprimer le m√©decin : {e}")

    def on_add():
        """Ajoute un nouveau m√©decin."""
        add_window = Toplevel(window)
        add_window.title("Ajouter un MAR titulaire")
        add_window.geometry("400x400")  # Ajuste la taille (largeur x hauteur)

        # Variables pour les champs
        nom_var = StringVar()
        prenom_var = StringVar()
        ordre_var = StringVar()
        email_var = StringVar()
        iban_var = StringVar()


        Label(add_window, text="Nom :").grid(row=0, column=0, padx=10, pady=5)
        Entry(add_window, textvariable=nom_var).grid(row=0, column=1, padx=10, pady=5)

        Label(add_window, text="Pr√©nom :").grid(row=1, column=0, padx=10, pady=5)
        Entry(add_window, textvariable=prenom_var).grid(row=1, column=1, padx=10, pady=5)

        Label(add_window, text="N¬∞ Ordre :").grid(row=2, column=0, padx=10, pady=5)
        Entry(add_window, textvariable=ordre_var).grid(row=2, column=1, padx=10, pady=5)

        Label(add_window, text="Email :").grid(row=3, column=0, padx=10, pady=5)
        Entry(add_window, textvariable=email_var).grid(row=3, column=1, padx=10, pady=5)
        
        Label(add_window, text="IBAN :").grid(row=4, column=0, padx=10, pady=5)
        Entry(add_window, textvariable=iban_var).grid(row=4, column=1, padx=10, pady=5)


        def save_new():
            new_row = {
                "NOM": nom_var.get(),
                "PRENOM": prenom_var.get(),
                "N ORDRE": ordre_var.get(),
                "EMAIL": email_var.get(),
                "IBAN": iban_var.get()
            }
            mars_titulaires.loc[len(mars_titulaires)] = new_row

            try:
                save_excel_with_updated_sheet(file_paths["excel_mar"], "MARS SELARL", mars_titulaires)
                refresh_listbox()
                add_window.destroy()
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible d'ajouter le m√©decin : {e}")

    def on_add():
        """Ajoute un nouveau m√©decin."""
        add_window = Toplevel(window)
        add_window.title("Ajouter un MAR titulaire")
        add_window.geometry("400x400")  # Ajuste la taille (largeur x hauteur)

        # Variables pour les champs
        nom_var = StringVar()
        prenom_var = StringVar()
        ordre_var = StringVar()
        email_var = StringVar()
        iban_var = StringVar()

        Label(add_window, text="Nom :").grid(row=0, column=0, padx=10, pady=5, sticky="w")
        Entry(add_window, textvariable=nom_var).grid(row=0, column=1, padx=10, pady=5)

        Label(add_window, text="Pr√©nom :").grid(row=1, column=0, padx=10, pady=5, sticky="w")
        Entry(add_window, textvariable=prenom_var).grid(row=1, column=1, padx=10, pady=5)

        Label(add_window, text="N¬∞ Ordre :").grid(row=2, column=0, padx=10, pady=5, sticky="w")
        Entry(add_window, textvariable=ordre_var).grid(row=2, column=1, padx=10, pady=5)

        Label(add_window, text="Email :").grid(row=3, column=0, padx=10, pady=5, sticky="w")
        Entry(add_window, textvariable=email_var).grid(row=3, column=1, padx=10, pady=5)

        Label(add_window, text="IBAN :").grid(row=4, column=0, padx=10, pady=5, sticky="w")
        Entry(add_window, textvariable=iban_var).grid(row=4, column=1, padx=10, pady=5)

    def save_new():
        """Sauvegarde le nouveau MAR titulaire dans le fichier Excel."""
        new_row = {
            "NOM": nom_var.get(),
            "PRENOM": prenom_var.get(),
            "N ORDRE": ordre_var.get(),
            "EMAIL": email_var.get(),
            "IBAN": iban_var.get()
        }
        try:
            mars_titulaires.loc[len(mars_titulaires)] = new_row
            save_excel_with_updated_sheet(file_paths["excel_mar"], "MARS SELARL", mars_titulaires)
            messagebox.showinfo("Succ√®s", "M√©decin ajout√©.")
            refresh_listbox()
            add_window.destroy()
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible d'ajouter le m√©decin : {e}")

        # Ajout du bouton Enregistrer avec la bonne fonction
        Button(add_window, text="Enregistrer", command=save_new, bg="#4caf50", fg="black").grid(row=5, column=0, columnspan=2, pady=10)

    # Fen√™tre principale
    window = tk.Toplevel()
    window.title("Liste des MARS titulaires")
    window.geometry("550x500")
    window.configure(bg="#f2f7ff")

    # Titre
    title_frame = tk.Frame(window, bg="#4a90e2")
    title_frame.pack(fill="x")
    tk.Label(
        title_frame, text="Liste des MARS titulaires", font=("Arial", 16, "bold"), fg="white", bg="#4a90e2", pady=10
    ).pack()

    # Liste des titulaires
    listbox_frame = tk.Frame(window, bg="#f2f7ff")
    listbox_frame.pack(pady=20, padx=20)
    listbox = tk.Listbox(
        listbox_frame, width=50, height=15, font=("Arial", 12), selectbackground="#d1e7ff", selectforeground="black"
    )
    listbox.pack()

    # Boutons
    button_frame = tk.Frame(window, bg="#f2f7ff")
    button_frame.pack(pady=20)

    tk.Button(
        button_frame, text="Modifier", command=on_modify, width=15, bg="#4caf50", fg="black", font=("Arial", 10, "bold")
    ).grid(row=0, column=0, padx=10, pady=10)
    tk.Button(
        button_frame, text="Ajouter", command=on_add, width=15, bg="#2196f3", fg="black", font=("Arial", 10, "bold")
    ).grid(row=0, column=1, padx=10, pady=10)
    tk.Button(
        button_frame, text="Supprimer", command=on_delete, width=15, bg="#f44336", fg="black", font=("Arial", 10, "bold")
    ).grid(row=0, column=2, padx=10, pady=10)

    # Bouton retour
    tk.Button(
        window, text="Retour", command=window.destroy, width=20, bg="#607d8b", fg="black", font=("Arial", 12, "bold")
    ).pack(pady=10)

    # Remplissage initial de la liste
    refresh_listbox()


def manage_iade_remplacants():
    """G√©rer les IADE rempla√ßants dans le fichier Excel."""
    try:
        iade_data = pd.read_excel(file_paths["excel_iade"], sheet_name="Coordonn√©es IADEs", dtype={"DPTN": str, "NOSSR": str, "IBAN": str})
    except FileNotFoundError:
        print("Erreur : Le fichier Excel pour les IADEs est introuvable.")
        return
    except Exception as e:
        print(f"Erreur lors de l'ouverture du fichier Excel : {e}")
        return

    def update_listbox():
        """Met √† jour la liste des IADEs affich√©e dans la Listbox."""
        listbox.delete(0, tk.END)
        for index, row in iade_data.iterrows():
            listbox.insert(tk.END, f"{row['NOMR']} {row['PRENOMR']}")

    def confirm_action(message):
        """Affiche une bo√Æte de dialogue de confirmation."""
        return messagebox.askyesno("Confirmation", message)

    def delete_entry():
        """Supprime un IADE rempla√ßant."""
        selected_index = listbox.curselection()
        if not selected_index:
            messagebox.showerror("Erreur", "Aucun IADE s√©lectionn√©.")
            return

        selected_index = selected_index[0]
        selected_entry = iade_data.iloc[selected_index]

        if not confirm_action(f"√ätes-vous s√ªr de vouloir supprimer {selected_entry['NOMR']} {selected_entry['PRENOMR']} ?"):
            return

        try:
            iade_data.drop(index=selected_index, inplace=True)
            iade_data.reset_index(drop=True, inplace=True)
            save_to_excel(file_paths["excel_iade"], "Coordonn√©es IADEs", iade_data)
            update_listbox()
            print(f"IADE {selected_entry['NOMR']} {selected_entry['PRENOMR']} supprim√© avec succ√®s.")
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de supprimer l'IADE : {e}")


    def add_entry():
        """Ajoute un nouvel IADE."""
        def update_sexe_dependent_fields(*args):
            if sexe_var.get() == "Madame":
                er_var.set("e")
                ilr_var.set("elle")
                salarier_var.set("√† la salari√©e")
            else:
                er_var.set("")
                ilr_var.set("il")
                salarier_var.set("au salari√©")

    
        def save_new_entry():
            """Enregistre les donn√©es du nouvel IADE dans le fichier Excel."""
            new_data = {
                "NOMR": nomr_var.get(),
                "PRENOMR": prenomr_var.get(),
                "EMAIL": email_var.get(),
                "LIEUNR": lieunr_var.get(),
                "DPTN": dptn_var.get(),
                "ADRESSER": adresser_var.get(),
                "NOSSR": nossr_var.get(),
                "NATR": natr_var.get(),
                "IBAN": iban_var.get(),
                "SEXE": sexe_var.get(),
                "ER": "e" if sexe_var.get() == "Madame" else "",
                "ILR": "elle" if sexe_var.get() == "Madame" else "il",
                "SALARIER": "√† la salari√©e" if sexe_var.get() == "Madame" else "au salari√©",
                "DDNR": ddnr_var.get()
            }

            # V√©rifier si tous les champs sont remplis
            if any((value is None or str(value).strip() == "") and key != "ER" for key, value in new_data.items()):
                empty_fields = [key for key, value in new_data.items() if (value is None or str(value).strip() == "") and key != "ER"]
                print(f"‚ùå Erreur : Champs vides mais requis : {empty_fields}")
                messagebox.showerror("Erreur", f"Tous les champs doivent √™tre remplis. Manquants : {', '.join(empty_fields)}")
                return

            # Ajouter les donn√©es au DataFrame
            try:
                iade_data.loc[len(iade_data)] = new_data
                save_to_excel(file_paths["excel_iade"], "Coordonn√©es IADEs", iade_data)
                update_listbox()
                add_window.destroy()
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible d'ajouter l'IADE : {e}")

        add_window = tk.Toplevel(window)
        add_window.title("Ajouter IADE")
        window_width = 480  # 400px + 20%
        window_height = 540
        add_window.geometry(f"{window_width}x{window_height}")

        nomr_var = tk.StringVar()
        prenomr_var = tk.StringVar()
        email_var = tk.StringVar()
        lieunr_var = tk.StringVar()
        dptn_var = tk.StringVar()
        adresser_var = tk.StringVar()
        nossr_var = tk.StringVar()
        natr_var = tk.StringVar()
        iban_var = tk.StringVar()  # Ajout du champ IBAN/RIB
        sexe_var = tk.StringVar(value="Monsieur")
        ddnr_var = tk.StringVar()
        er_var = tk.StringVar()
        ilr_var = tk.StringVar()
        salarier_var = tk.StringVar()
        sexe_var.trace_add("write", update_sexe_dependent_fields)
        
        update_sexe_dependent_fields()  

        fields = [
            ("Nom", nomr_var), ("Pr√©nom", prenomr_var), ("Date de naissance", ddnr_var),
            ("Lieu de naissance", lieunr_var), ("D√©partement de naissance", dptn_var), ("Nationalit√©", natr_var),
            ("Adresse", adresser_var), ("Email", email_var), ("Num√©ro de s√©curit√© sociale", nossr_var),
            ("IBAN / RIB", iban_var), 
        ]

        for i, (label, var) in enumerate(fields):
            tk.Label(add_window, text=label).grid(row=i, column=0, sticky="w")
            tk.Entry(add_window, textvariable=var).grid(row=i, column=1)
            
        sexe_index = len(fields)
        tk.Label(add_window, text="Sexe").grid(row=sexe_index, column=0, sticky="w")
        tk.OptionMenu(add_window, sexe_var, "Monsieur", "Madame").grid(row=sexe_index, column=1)

        # Affichage des champs ER, ILR et SALARIER
        extra_fields = [
            ("ER", er_var),
            ("ILR", ilr_var),
            ("SALARIER", salarier_var)
        ]

        for i, (label, var) in enumerate(extra_fields, start=sexe_index + 1):
            tk.Label(add_window, text=label).grid(row=i, column=0, sticky="w")
            tk.Entry(add_window, textvariable=var, state="readonly").grid(row=i, column=1)



        tk.Label(add_window, text="Sexe").grid(row=len(fields), column=0, sticky="w")
        tk.OptionMenu(add_window, sexe_var, "Monsieur", "Madame").grid(row=len(fields), column=1)

        tk.Button(add_window, text="Enregistrer", command=save_new_entry, bg="#4caf50", fg="black").grid(row=len(fields) + 5, column=0, columnspan=3, pady=15)
        tk.Button(add_window, text="Annuler", command=add_window.destroy, bg="#d32f2f", fg="black").grid(row=len(fields) + 7, column=0, columnspan=3, pady=15)

        add_window.transient(window)
        add_window.grab_set()


    def modify_entry():
        """Modifier une entr√©e existante."""
        selected_index = listbox.curselection()
        if not selected_index:
            messagebox.showerror("Erreur", "Aucun IADE s√©lectionn√©.")
            return

        selected_index = selected_index[0]
        selected_entry = iade_data.iloc[selected_index]

        modify_window = tk.Toplevel(window)
        modify_window.title(f"Modifier IADE - {selected_entry['NOMR']} {selected_entry['PRENOMR']}")
        modify_window.geometry("600x600")

        fields = {
            "NOMR": "Nom",
            "PRENOMR": "Pr√©nom",
            "EMAIL": "Email",
            "LIEUNR": "Lieu de naissance",
            "DPTN": "D√©partement de naissance",
            "ADRESSER": "Adresse",
            "NOSSR": "Num√©ro de s√©curit√© sociale",
            "NATR": "Nationalit√©",
            "IBAN": "IBAN / RIB"  # Ajout du champ IBAN
        }

        entries = {}
        for i, (key, label) in enumerate(fields.items()):
            tk.Label(modify_window, text=label).grid(row=i, column=0, padx=10, pady=5, sticky="w")
            var = tk.StringVar(value=str(selected_entry.get(key, "")))
            tk.Entry(modify_window, textvariable=var, width=40).grid(row=i, column=1, padx=10, pady=5)
            entries[key] = var

        # S√©lection du sexe
        tk.Label(modify_window, text="Sexe").grid(row=len(fields), column=0, padx=10, pady=5, sticky="w")
        sexe_var = tk.StringVar(value=selected_entry.get("SEXE", "Monsieur"))
        sexe_menu = tk.OptionMenu(modify_window, sexe_var, "Monsieur", "Madame")
        sexe_menu.grid(row=len(fields), column=1, padx=10, pady=5)

        # Variables d√©pendantes du sexe
        er_var = tk.StringVar(value=selected_entry.get("ER", ""))
        ilr_var = tk.StringVar(value=selected_entry.get("ILR", ""))
        salarier_var = tk.StringVar(value=selected_entry.get("SALARIER", ""))
        sexe_var.trace("w", update_gender_fields)

        def update_gender_fields(*args):
            """Met √† jour les champs ER, ILR et SALARIER en fonction du sexe."""
            if sexe_var.get() == "Monsieur":
                er_var.set("")
                ilr_var.set("il")
                salarier_var.set("au salari√©")
            else:
                er_var.set("e")
                ilr_var.set("elle")
                salarier_var.set("√† la salari√©e")


        # Champs d√©pendants du sexe
        tk.Label(modify_window, text="ER").grid(row=len(fields) + 1, column=0, padx=10, pady=5, sticky="w")
        tk.Entry(modify_window, textvariable=er_var, state="readonly", width=40).grid(row=len(fields) + 1, column=1, padx=10, pady=5)

        tk.Label(modify_window, text="ILR").grid(row=len(fields) + 2, column=0, padx=10, pady=5, sticky="w")
        tk.Entry(modify_window, textvariable=ilr_var, state="readonly", width=40).grid(row=len(fields) + 2, column=1, padx=10, pady=5)

        tk.Label(modify_window, text="SALARIER").grid(row=len(fields) + 3, column=0, padx=10, pady=5, sticky="w")
        tk.Entry(modify_window, textvariable=salarier_var, state="readonly", width=40).grid(row=len(fields) + 3, column=1, padx=10, pady=5)

        def save_changes():
            """Enregistre les modifications dans le fichier Excel."""
            for key, var in entries.items():
                iade_data.at[selected_index, key] = var.get()
            iade_data.at[selected_index, "SEXE"] = sexe_var.get()
            iade_data.at[selected_index, "ER"] = er_var.get()
            iade_data.at[selected_index, "ILR"] = ilr_var.get()
            iade_data.at[selected_index, "SALARIER"] = salarier_var.get()
            save_to_excel(file_paths["excel_iade"], "Coordonn√©es IADEs", iade_data)
            modify_window.destroy()
            update_listbox()



        tk.Button(modify_window, text="Enregistrer", command=save_changes, bg="#4caf50", fg="black").grid(row=len(fields) + 4, column=0, columnspan=2, pady=10)
        tk.Button(modify_window, text="Retour", command=modify_window.destroy, bg="#d32f2f", fg="black").grid(row=len(fields) + 5, column=0, columnspan=2, pady=10)

    window = tk.Toplevel()
    window.title("Modifier liste IADE rempla√ßants")
    window.geometry("500x500")
    window.configure(bg="#f2f7ff")

    listbox = tk.Listbox(window, width=50, height=15, font=("Arial", 12))
    listbox.pack(pady=10)
    update_listbox()

    tk.Button(window, text="Ajouter", command=add_entry, width=20, bg="#2196f3", fg="black").pack(pady=5)
    tk.Button(window, text="Supprimer", command=delete_entry, width=20, bg="#f44336", fg="black").pack(pady=5)
    tk.Button(window, text="Modifier", command=modify_entry, width=20, bg="#4caf50", fg="black").pack(pady=5)
    tk.Button(window, text="Retour", command=window.destroy, width=20, bg="#607d8b", fg="black").pack(pady=5)

    def save_to_excel(file_path, sheet_name, updated_data):
        """Sauvegarde les modifications d'une seule feuille sans √©craser les autres."""
        try:
            # Charger toutes les feuilles existantes
            with pd.ExcelFile(file_path, engine="openpyxl") as xls:
                sheets = {sheet: xls.parse(sheet) for sheet in xls.sheet_names}

            # Mettre √† jour uniquement la feuille concern√©e
            sheets[sheet_name] = updated_data

            # R√©√©crire le fichier avec toutes les feuilles
            with pd.ExcelWriter(file_path, engine="openpyxl", mode="w") as writer:
                for sheet, df in sheets.items():
                    df.to_excel(writer, sheet_name=sheet, index=False)

        except Exception as e:
            print(f"Erreur lors de la sauvegarde de la feuille {sheet_name} : {e}")


    update_listbox()





def manage_mar_remplacants():
    """G√©rer les MARS rempla√ßants dans le fichier Excel."""
    global mar_data, listbox

    try:
        mar_data = pd.read_excel(file_paths["excel_mar"], sheet_name="MARS Rempla√ßants", dtype={"URSSAF": str, "secu": str, "IBAN": str, "N ORDRER": str})
    except FileNotFoundError:
        print("Erreur : Le fichier Excel pour les MARS est introuvable.")
        return
    except Exception as e:
        print(f"Erreur lors de l'ouverture du fichier Excel : {e}")
        return

    def update_listbox():
        """Met √† jour la liste des MARS affich√©e dans la Listbox."""
        listbox.delete(0, tk.END)
        for _, row in mar_data.iterrows():
            listbox.insert(tk.END, f"{row['NOMR']} {row['PRENOMR']}")

    def save_to_excel(file_path, sheet_name, updated_data):
        """Sauvegarde les modifications d'une seule feuille sans √©craser les autres."""
        try:
            with pd.ExcelFile(file_path, engine="openpyxl") as xls:
                sheets = {sheet: xls.parse(sheet) for sheet in xls.sheet_names}

            sheets[sheet_name] = updated_data

            with pd.ExcelWriter(file_path, engine="openpyxl", mode="w") as writer:
                for sheet, df in sheets.items():
                    df.to_excel(writer, sheet_name=sheet, index=False)

        except Exception as e:
            print(f"Erreur lors de la sauvegarde : {e}")

    def delete_entry():
        """Supprime un MAR rempla√ßant."""
        global mar_data
        selected_index = listbox.curselection()
        if not selected_index:
            messagebox.showerror("Erreur", "Aucun MAR s√©lectionn√©.")
            return

        selected_index = selected_index[0]
        selected_entry = mar_data.iloc[selected_index]

        if not messagebox.askyesno("Confirmation", f"Supprimer {selected_entry['NOMR']} {selected_entry['PRENOMR']} ?"):
            return

        try:
            mar_data.drop(index=selected_index, inplace=True)
            mar_data.reset_index(drop=True, inplace=True)
            save_to_excel(file_paths["excel_mar"], "MARS Rempla√ßants", mar_data)
            update_listbox()
            print(f"MAR {selected_entry['NOMR']} {selected_entry['PRENOMR']} supprim√©.")
        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de supprimer : {e}")

    def add_entry():
        """Ajouter un nouveau MARS rempla√ßant."""
        add_window = tk.Toplevel(window)
        add_window.title("Ajouter un MARS Rempla√ßant")
        add_window.geometry("400x700")

        fields = {label: tk.StringVar() for label in ["Nom", "Pr√©nom", "Email", "Adresse", "Num√©ro URSSAF", "Num√©ro S√©curit√© sociale", "IBAN", "Num√©ro de Conseil de l'Ordre"]}

        tk.Label(add_window, text="Ajouter un MARS Rempla√ßant", font=("Arial", 14, "bold")).pack(pady=10)
        for label, var in fields.items():
            tk.Label(add_window, text=label).pack(pady=2)
            tk.Entry(add_window, textvariable=var).pack(pady=2)

        def save_new_entry():
            """Enregistre le nouveau MARS rempla√ßant."""
            global mar_data
            new_data = {key: var.get() for key, var in fields.items()}
            new_data = dict(zip(["NOMR", "PRENOMR", "EMAILR", "AdresseR", "URSSAF", "secu", "IBAN", "N ORDRER"], new_data.values()))

            if not all(new_data.values()):
                messagebox.showerror("Erreur", "Tous les champs doivent √™tre remplis.")
                return

            mar_data = mar_data.append(new_data, ignore_index=True)
            save_to_excel(file_paths["excel_mar"], "MARS Rempla√ßants", mar_data)
            update_listbox()
            add_window.destroy()

        tk.Button(add_window, text="Enregistrer", command=save_new_entry, bg="green", fg="black").pack(pady=10)
        tk.Button(add_window, text="Annuler", command=add_window.destroy, bg="red", fg="black").pack(pady=10)

    def modify_entry():
        """Modifier un MARS rempla√ßant existant."""
        global mar_data
        selected_index = listbox.curselection()
        if not selected_index:
            messagebox.showerror("Erreur", "Aucun MARS s√©lectionn√©.")
            return

        selected_index = selected_index[0]
        selected_entry = mar_data.iloc[selected_index]

        modify_window = tk.Toplevel(window)
        modify_window.title("Modifier un MARS Rempla√ßant")
        modify_window.geometry("400x700")

        fields = {
            "Nom": "NOMR",
            "Pr√©nom": "PRENOMR",
            "Email": "EMAILR",
            "Adresse": "AdresseR",
            "Num√©ro URSSAF": "URSSAF",
            "Num√©ro S√©curit√© sociale": "secu",
            "IBAN": "IBAN",
            "Num√©ro de Conseil de l'Ordre": "N ORDRER"
        }

        entries = {key: tk.StringVar(value=selected_entry[val]) for key, val in fields.items()}

        for label, var in entries.items():
            tk.Label(modify_window, text=label).pack(pady=2)
            tk.Entry(modify_window, textvariable=var).pack(pady=2)

        def save_changes():
            """Enregistre les modifications d'un MAR rempla√ßant."""
            global mar_data
            for key, val in entries.items():
                mar_data.at[selected_index, fields[key]] = val.get()

            save_to_excel(file_paths["excel_mar"], "MARS Rempla√ßants", mar_data)
            modify_window.destroy()
            update_listbox()

        tk.Button(modify_window, text="Enregistrer", command=save_changes, bg="green", fg="black").pack(pady=10)
        tk.Button(modify_window, text="Annuler", command=modify_window.destroy, bg="red", fg="black").pack(pady=10)

    window = tk.Toplevel()
    window.title("Liste des MARS Rempla√ßants")
    window.geometry("500x400")

    listbox = tk.Listbox(window, width=50, height=15)
    listbox.pack(pady=10)
    update_listbox()

    tk.Button(window, text="Ajouter", command=add_entry).pack()
    tk.Button(window, text="Modifier", command=modify_entry).pack()
    tk.Button(window, text="Supprimer", command=delete_entry).pack()
    tk.Button(window, text="Fermer", command=window.destroy).pack()




def save_excel_with_updated_sheet(file_path, sheet_name, updated_data):
    """Sauvegarde une feuille sp√©cifique sans supprimer les autres."""
    try:
        # Charger toutes les feuilles existantes
        with pd.ExcelFile(file_path, engine="openpyxl") as xls:
            sheets = {sheet: xls.parse(sheet) for sheet in xls.sheet_names}

        # Mettre √† jour uniquement la feuille concern√©e
        sheets[sheet_name] = updated_data
        if "Rempla√ßants" in sheet_name:
            print("DEBUG: Sauvegarde des informations des rempla√ßants:", updated_data.head())

        # R√©√©crire le fichier avec toutes les feuilles
        with pd.ExcelWriter(file_path, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
            for sheet, df in sheets.items():
                df.to_excel(writer, sheet_name=sheet, index=False)

        print(f"‚úÖ Feuille '{sheet_name}' sauvegard√©e avec succ√®s dans {file_path}")

    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde de la feuille '{sheet_name}' : {e}")





def activate_word():
    """
    Active Microsoft Word en utilisant AppleScript avant de chercher les boutons.
    """
    applescript = """
    tell application "Microsoft Word"
        activate
    end tell
    """
    try:
        subprocess.run(["osascript", "-e", applescript], check=True)
        print("Microsoft Word activ√©.")
    except Exception as e:
        print(f"Erreur lors de l'activation de Microsoft Word : {e}")

def quit_word():
    """
    Ferme Microsoft Word √† la fin du script.
    """
    applescript = """
    tell application "Microsoft Word"
        quit saving no
    end tell
    """
    try:
        subprocess.run(["osascript", "-e", applescript], check=True)
        print("Microsoft Word ferm√©.")
    except Exception as e:
        print(f"Erreur lors de la fermeture de Microsoft Word : {e}")

def handle_popups():
    """
    G√®re les popups de Word avec des clics automatiques bas√©s sur des coordonn√©es fixes.
    """
    try:
        print("Attente des fen√™tres popups...")
        time.sleep(1)  # Attendre que les popups apparaissent

        # Clic sur "Oui"
        print(f"Clic sur 'Oui' aux coordonn√©es : ({x_oui}, {y_oui})")
        pyautogui.moveTo(x_oui, y_oui, duration=0.2)
        pyautogui.click()

        # Pause avant de g√©rer "OK"
        time.sleep(1)

        # Clic sur "OK"
        print(f"Clic sur 'OK' aux coordonn√©es : ({x_ok}, {y_ok})")
        pyautogui.moveTo(x_ok, y_ok, duration=0.2)
        pyautogui.click()

        print("Les boutons ont √©t√© cliqu√©s avec succ√®s.")
    except Exception as e:
        print(f"Erreur lors de la gestion des popups : {e}")



def save_to_new_excel(dataframe, new_excel_path, sheet_name="CONTRAT"):
    """Cr√©e un nouveau fichier Excel avec la feuille sp√©cifi√©e sans bo√Ætes de dialogue."""
    try:
        with pd.ExcelWriter(new_excel_path, engine="openpyxl") as writer:
            dataframe.to_excel(writer, sheet_name=sheet_name, index=False)
    except Exception as e:
        print(f"Erreur lors de la sauvegarde du fichier Excel : {e}")


def perform_mail_merge(word_file, replaced_name, replacing_name, start_date, pdf_folder, contract_type="MAR"):
    print(f"üìÑ Dossier PDF : {pdf_folder}")
    print(f"üìÑ Mod√®le Word : {word_file}")
    print(f"üë®‚Äç‚öïÔ∏è Remplac√© : {replaced_name}")
    print(f"üë®‚Äç‚öïÔ∏è Rempla√ßant : {replacing_name}")
    print(f"üìÖ Date d√©but : {start_date}")
    print(f"üìÑ Type contrat : {contract_type}")

    # Assurer que le dossier cible existe
    pdf_folder = ensure_directory_exists(pdf_folder)

    # Formatage de la date pour le nom du fichier
    formatted_date = datetime.strptime(start_date, "%Y-%m-%d").strftime("%Y%m%d")

    # G√©n√©ration du nom de fichier PDF
    if contract_type == "MAR":
        if not replaced_name or not replacing_name:
            print("‚ùå Erreur : Noms des m√©decins incorrects.")
            return None
        pdf_filename = f"{formatted_date}_Contrat_{replacing_name}_{replaced_name}.pdf"
    elif contract_type == "IADE":
        if not replacing_name:
            print("‚ùå Erreur : Nom du rempla√ßant manquant.")
            return None
        pdf_filename = f"{formatted_date}_CDD_{replacing_name.strip()}.pdf"
    else:
        print(f"‚ùå Erreur : Type de contrat inconnu {contract_type}")
        return None

    output_pdf_path = os.path.join(pdf_folder, pdf_filename)
    print(f"üìÑ Chemin pr√©vu pour le PDF : {output_pdf_path}")

    # üìå Script AppleScript mis √† jour
    applescript = f"""
    tell application "Microsoft Word"
        activate
        open POSIX file "{word_file}"
        delay 3 -- Attendre que Word charge le document

        -- Sauvegarde en PDF
        set output_pdf_path to POSIX file "{output_pdf_path}"
        save as active document file name output_pdf_path file format format PDF

        -- Fermer le document sans enregistrer
        close active document saving no
    end tell
    """

    try:
        # üìå Lancer Word en arri√®re-plan pour √©viter que Python ne soit bloqu√©
        word_process = subprocess.Popen(["osascript", "-e", applescript])

        # üìå Attendre un peu que Word ouvre sa fen√™tre
        time.sleep(2)

        # üìå Lancer handle_popups() en **parall√®le** pour cliquer sur "Oui" et "OK"
        popup_thread = threading.Thread(target=handle_popups)
        popup_thread.start()

        # üìå Attendre que Word termine (optionnel, si besoin)
        word_process.wait()

        print(f"‚úÖ PDF g√©n√©r√© : {output_pdf_path}")

        if os.path.exists(output_pdf_path):
            return output_pdf_path  
        else:
            print("‚ùå Erreur : Fichier PDF non trouv√© apr√®s g√©n√©ration.")
            return None  

    except Exception as e:
        print(f"‚ùå Erreur lors du publipostage : {e}")
        return None  
    
def open_contract_creation_iade():
    """Affiche le formulaire de cr√©ation de contrat IADE dans le panneau droit."""
    clear_right_frame()  # Nettoie le panneau droit avant d'y ajouter de nouveaux √©l√©ments
    
    try:
        iade_data = pd.read_excel(file_paths["excel_iade"], sheet_name="Coordonn√©es IADEs")
    except FileNotFoundError:
        print("Erreur : Le fichier Excel pour les contrats IADE est introuvable.")
        return
    except Exception as e:
        print(f"Erreur lors de l'ouverture du fichier Excel IADE : {e}")
        return
    
    # Conteneur principal - utilisation d'un PanedWindow pour diviser l'espace
    main_container = tk.PanedWindow(right_frame, orient=tk.HORIZONTAL)
    main_container.pack(fill="both", expand=True)
    
    # Cadre gauche pour le formulaire
    form_container = tk.Frame(main_container, bg="#f0f4f7", padx=20, pady=20)
    main_container.add(form_container, width=420)  # Largeur fixe pour le formulaire
    
    # Cadre droit pour les actions post-contrat (initialement vide)
    actions_container = tk.Frame(main_container, bg="#f5f5f5", padx=20, pady=20)
    main_container.add(actions_container, width=400)  # Largeur pour les actions
    
    # Titre du formulaire
    tk.Label(form_container, text="ü©∫ Nouveau contrat IADE", 
            font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Fonction pour s√©lectionner les dates
    def select_dates():
        """Ouvre un calendrier pour s√©lectionner les dates de d√©but et de fin."""
        selected_dates = []

        def on_date_select():
            selected_date = calendar.get_date()
            selected_dates.append(selected_date)
            if len(selected_dates) == 1:
                start_date_var.set(selected_date)
                message_var.set("S√©lectionnez la date de fin.")
            elif len(selected_dates) == 2:
                end_date_var.set(selected_date)
                date_picker.destroy()

        date_picker = Toplevel(root)
        date_picker.title("S√©lectionner les dates")

        message_var = StringVar(value="S√©lectionnez la date de d√©but.")
        Label(date_picker, textvariable=message_var, font=("Arial", 12)).pack(pady=5)

        calendar = Calendar(
            date_picker,
            date_pattern="yyyy-mm-dd",
            background="white",
            foreground="black",
            selectbackground="blue",
            selectforeground="white",
        )
        calendar.pack(pady=10)

        Button(date_picker, text="Valider", command=on_date_select).pack(pady=5)
        Button(date_picker, text="Fermer", command=date_picker.destroy).pack(pady=5)
    
    # Fonction pour enregistrer le contrat
    def save_contract_iade():
        """G√©n√®re un fichier Excel et un contrat IADE, puis affiche les options post-contrat."""
        # R√©cup√©ration des valeurs depuis l'interface
        replacing_name = replacing_var.get()
        start_date = start_date_var.get()
        end_date = end_date_var.get()
        sign_date = sign_date_var.get()
        nb_hours = nb_hours_var.get()

        # V√©rification que tous les champs sont bien remplis
        if not replacing_name or not start_date or not end_date or not sign_date or not nb_hours:
            print("‚ùå Erreur : Tous les champs doivent √™tre remplis.")
            return

        try:
            # R√©cup√©rer les donn√©es de l'IADE depuis la base
            replacing_data = iade_data[iade_data["NOMR"] == replacing_name].iloc[0]
            replacing_email = replacing_data["EMAIL"]
            
            # Correction : R√©cup√©ration du pr√©nom et nom complet
            replacing_full_name = f"{replacing_data['PRENOMR']} {replacing_data['NOMR']}".strip()

        except IndexError:
            print(f"‚ùå Erreur : Impossible de trouver l'IADE '{replacing_name}' dans la base.")
            return

        # Correction de l'email pour √©viter 'nan'
        if pd.isna(replacing_email) or replacing_email in ["", "nan"]:
            replacing_email = "email_inconnu@exemple.com"

        # D√©finir les colonnes du fichier Excel temporaire
        columns = [
            "SEXE", "NOMR", "PRENOMR", "DDNR", "ER", "ILR", "SALARIER",
            "LIEUNR", "DPTN", "ADRESSER", "NOSSR", "NATR", "EMAIL",
            "DATEDEBUT", "DATEFIN", "DATESIGN", "NBHEURES"
        ]

        # R√©cup√©rer les informations de l'IADE s√©lectionn√©
        row_data = {
            "SEXE": replacing_data["SEXE"],
            "NOMR": replacing_data["NOMR"],
            "PRENOMR": replacing_data["PRENOMR"],
            "DDNR": replacing_data["DDNR"],
            "ER": replacing_data["ER"],
            "ILR": replacing_data["ILR"],
            "SALARIER": replacing_data["SALARIER"],
            "LIEUNR": replacing_data["LIEUNR"],
            "DPTN": replacing_data["DPTN"],
            "ADRESSER": replacing_data["ADRESSER"],
            "NOSSR": replacing_data["NOSSR"],
            "NATR": replacing_data["NATR"],
            "EMAIL": replacing_email,
            "DATEDEBUT": start_date,
            "DATEFIN": end_date,
            "DATESIGN": sign_date,
            "NBHEURES": nb_hours
        }

        # Cr√©er un DataFrame avec les donn√©es
        contrat_iade = pd.DataFrame([row_data])

        # D√©finir le chemin du fichier temporaire
        excel_temp_path = "/Users/vincentperreard/Documents/Contrats/IADE/temp_contrat_iade.xlsx"

        # Sauvegarder dans un fichier Excel temporaire
        with pd.ExcelWriter(excel_temp_path, engine="openpyxl") as writer:
            contrat_iade.to_excel(writer, index=False, sheet_name="CONTRAT")

        print(f"‚úÖ Donn√©es du contrat IADE enregistr√©es dans {excel_temp_path}")

        # Effectuer le publipostage et g√©n√©rer le PDF
        pdf_path = perform_mail_merge(
            file_paths["word_iade"],  # Mod√®le Word pour IADE
            None,  # IADE n'a pas de remplac√©
            replacing_full_name,
            start_date,
            os.path.expanduser(file_paths["pdf_iade"]),
            contract_type="IADE"
        )

        if not pdf_path:
            print("‚ùå Erreur : Le fichier PDF n'a pas pu √™tre g√©n√©r√©.")
            return
            
        print(f"‚úÖ Contrat IADE enregistr√© sous : {pdf_path}")
        
        # D√©sactiver les √©l√©ments du formulaire
        for widget in form_frame.winfo_children():
            if isinstance(widget, (tk.Entry, tk.Button, tk.OptionMenu)):
                widget.configure(state="disabled")
                
        # Vider le conteneur d'actions
        for widget in actions_container.winfo_children():
            widget.destroy()
            
        # Titre
        tk.Label(actions_container, text="Actions sur le contrat", 
                font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
        
        # Information sur le contrat g√©n√©r√©
        info_text = f"Contrat g√©n√©r√© pour:\n{replacing_full_name}\ndu {start_date} au {end_date}"
        tk.Label(actions_container, text=info_text, justify=tk.LEFT, 
                bg="#f5f5f5", padx=10, pady=5).pack(fill="x", pady=10)
        
        # Bouton pour ouvrir le PDF
        def open_pdf():
            subprocess.run(["open", "-a", "PDF Expert", pdf_path])
            
        tk.Button(actions_container, text="üìÑ Ouvrir avec PDF Expert", 
                command=open_pdf, width=30).pack(pady=5)
        
        # Bouton pour envoyer √† DocuSign
        tk.Button(actions_container, text="üì© Envoyer en DocuSign", 
                command=lambda: send_to_docusign(pdf_path, "IADE", start_date, end_date, 
                                                replacing_full_name, replacing_email, 
                                                None, None), 
                width=30).pack(pady=5)
        
        # Bouton pour le r√®glement (d√©sactiv√©)
        tk.Button(actions_container, text="üí∞ Effectuer le r√®glement (√† venir)", 
                state="disabled", width=30).pack(pady=5)
        
        # Bouton pour revenir √† l'accueil
        tk.Button(actions_container, text="üè† Retour √† l'accueil", 
                command=lambda: [clear_right_frame(), show_welcome_image()], 
                width=30).pack(pady=20)
        
    # Formulaire principal
    form_frame = tk.Frame(form_container, bg="#f0f4f7")
    form_frame.pack(pady=10, fill="x")
    
    # IADE rempla√ßant
    tk.Label(form_frame, text="IADE rempla√ßant :", bg="#f0f4f7").grid(row=0, column=0, sticky="w", pady=5)
    replacing_var = StringVar()
    replacing_menu = tk.OptionMenu(form_frame, replacing_var, *iade_data["NOMR"].tolist())
    replacing_menu.grid(row=0, column=1, sticky="w", padx=5, pady=5)
    
    # Bouton pour s√©lectionner les dates
    tk.Label(form_frame, text="Dates de d√©but et de fin :", bg="#f0f4f7").grid(row=1, column=0, sticky="w", pady=5)
    date_btn = Button(form_frame, text="üìÖ S√©lectionner les dates", command=select_dates)
    date_btn.grid(row=1, column=1, sticky="w", padx=5, pady=5)
    
    start_date_var = StringVar()
    end_date_var = StringVar()
    
    # Date de d√©but
    tk.Label(form_frame, text="Date de d√©but :", bg="#f0f4f7").grid(row=2, column=0, sticky="w", pady=5)
    start_entry = Entry(form_frame, textvariable=start_date_var, state="readonly")
    start_entry.grid(row=2, column=1, sticky="w", padx=5, pady=5)
    
    # Date de fin
    tk.Label(form_frame, text="Date de fin :", bg="#f0f4f7").grid(row=3, column=0, sticky="w", pady=5)
    end_entry = Entry(form_frame, textvariable=end_date_var, state="readonly")
    end_entry.grid(row=3, column=1, sticky="w", padx=5, pady=5)
    
    # Date de signature
    tk.Label(form_frame, text="Date de signature :", bg="#f0f4f7").grid(row=4, column=0, sticky="w", pady=5)
    sign_date_var = StringVar(value=datetime.today().strftime("%Y-%m-%d"))
    sign_entry = Entry(form_frame, textvariable=sign_date_var)
    sign_entry.grid(row=4, column=1, sticky="w", padx=5, pady=5)
    
    # Nombre d'heures par jour
    tk.Label(form_frame, text="Nombre d'heures par jour :", bg="#f0f4f7").grid(row=5, column=0, sticky="w", pady=5)
    nb_hours_var = StringVar(value="9")
    hours_entry = Entry(form_frame, textvariable=nb_hours_var)
    hours_entry.grid(row=5, column=1, sticky="w", padx=5, pady=5)
    
    # Bouton de cr√©ation et annulation
    create_btn = Button(form_frame, text="Cr√©er le contrat", command=save_contract_iade, 
                       font=("Arial", 12, "bold"), bg="#007ACC", fg="black")
    create_btn.grid(row=6, column=0, pady=10, padx=5, sticky="w")
    
    cancel_btn = Button(form_frame, text="Annuler", command=lambda: [clear_right_frame(), show_welcome_image()], 
                       font=("Arial", 10), bg="#f44336", fg="black")
    cancel_btn.grid(row=6, column=1, pady=10, padx=5, sticky="w")



def open_contract_creation_mar():
    """Affiche le formulaire de cr√©ation de contrat MAR dans le panneau droit."""
    clear_right_frame()  # Nettoie le panneau droit avant d'y ajouter de nouveaux √©l√©ments
    
    # Chargement des donn√©es
    mars_selarl = pd.read_excel(file_paths["excel_mar"], sheet_name="MARS SELARL")
    mars_rempla = pd.read_excel(file_paths["excel_mar"], sheet_name="MARS Rempla√ßants")
    
    # Concat√©nation PRENOM + NOM en une seule colonne normalis√©e
    mars_selarl["FULL_NAME"] = mars_selarl["PRENOM"].fillna("").str.strip() + " " + mars_selarl["NOM"].fillna("").str.strip()
    mars_rempla["FULL_NAME"] = mars_rempla["PRENOMR"].fillna("").str.strip() + " " + mars_rempla["NOMR"].fillna("").str.strip()
    
    if mars_selarl is None or mars_rempla is None:
        return
    
    # Conteneur principal - utilisation d'un PanedWindow pour diviser l'espace
    main_container = tk.PanedWindow(right_frame, orient=tk.HORIZONTAL)
    main_container.pack(fill="both", expand=True)
    
    # Cadre gauche pour le formulaire
    form_container = tk.Frame(main_container, bg="#f0f4f7", padx=20, pady=20)
    main_container.add(form_container, width=420)  # Largeur fixe pour le formulaire
    
    # Cadre droit pour les actions post-contrat (initialement vide)
    actions_container = tk.Frame(main_container, bg="#f5f5f5", padx=20, pady=20)
    main_container.add(actions_container, width=400)  # Largeur pour les actions
    
    # Titre du formulaire
    tk.Label(form_container, text="Nouveau contrat remplacement MAR", 
            font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    def select_dates():
        """Ouvre un calendrier pour s√©lectionner les dates de d√©but et de fin."""
        selected_dates = []

        def update_message():
            """Mise √† jour du message selon le nombre de dates s√©lectionn√©es."""
            if len(selected_dates) == 0:
                message_var.set("S√©lectionnez la date de d√©but.")
            elif len(selected_dates) == 1:
                message_var.set("S√©lectionnez la date de fin.")

        def on_date_select():
            """Capture la date s√©lectionn√©e."""
            selected_date = calendar.get_date()
            selected_dates.append(selected_date)
            update_message()

            if len(selected_dates) == 2:  # Deux dates s√©lectionn√©es
                start_date_var.set(min(selected_dates))
                end_date_var.set(max(selected_dates))
                date_picker.destroy()
            elif len(selected_dates) == 1:  # Une seule date s√©lectionn√©e
                start_date_var.set(selected_date)
                end_date_var.set(selected_date)

        def close_calendar():
            """Ferme le calendrier en ne retenant qu'une seule date si n√©cessaire."""
            if len(selected_dates) == 1:  # Si une seule date est s√©lectionn√©e
                start_date_var.set(selected_dates[0])
                end_date_var.set(selected_dates[0])
            date_picker.destroy()

        # Cr√©e la fen√™tre de calendrier (reste un Toplevel car c'est une fen√™tre modale)
        date_picker = Toplevel(root)
        date_picker.title("S√©lectionner les dates")

        message_var = StringVar()
        message_var.set("S√©lectionnez la date de d√©but.")
        Label(date_picker, text="S√©lectionner les dates", font=("Arial", 12, "bold")).pack(pady=5)
        Label(date_picker, textvariable=message_var, font=("Arial", 10)).pack(pady=5)

        calendar = Calendar(
            date_picker,
            date_pattern="yyyy-mm-dd",
            background="white",
            foreground="black",
            selectbackground="blue",
            selectforeground="white",
        )
        calendar.pack(pady=10)

        Button(date_picker, text="Valider", command=on_date_select).pack(pady=5, side=tk.LEFT, padx=10)
        Button(date_picker, text="Fermer", command=close_calendar).pack(pady=5, side=tk.RIGHT, padx=10)

        pass
    
    def save_contract():
        """Sauvegarde les informations du contrat et g√©n√®re le PDF."""
        print("file_paths keys:", file_paths.keys())
        
        replaced_name = replaced_var.get().strip()
        replacing_name = replacing_var.get().strip()
        start_date = start_date_var.get()
        end_date = end_date_var.get()
        sign_date = sign_date_var.get()
        daily_fee = daily_fee_var.get()

        # V√©rification insensible √† la casse et aux espaces
        replaced_matches = mars_selarl[mars_selarl["FULL_NAME"].str.strip().str.upper() == replaced_name.strip().upper()]
        if replaced_matches.empty:
            print(f"‚ùå Erreur : M√©decin remplac√© '{replaced_name}' introuvable dans la base.")
            print("üìã Liste des noms disponibles :", mars_selarl["FULL_NAME"].tolist())
            return
        replaced_data = replaced_matches.iloc[0]

        replacing_matches = mars_rempla[mars_rempla["FULL_NAME"].str.strip().str.upper() == replacing_name.strip().upper()]
        if replacing_matches.empty:
            print(f"‚ùå Erreur : M√©decin rempla√ßant '{replacing_name}' introuvable dans la base.")
            print("üìã Liste des noms disponibles :", mars_rempla["FULL_NAME"].tolist())
            return
        replacing_data = replacing_matches.iloc[0]

        print(f"üõ†Ô∏è DEBUG : Donn√©es du remplac√© : {replaced_data.to_dict()}")
        print(f"üõ†Ô∏è DEBUG : Donn√©es du rempla√ßant : {replacing_data.to_dict()}")

        # V√©rification des dates
        if not start_date or not end_date:
            print("‚ùå Erreur : Les dates ne sont pas d√©finies correctement.")
            return

        # R√©cup√©ration et nettoyage des emails
        replaced_email = replaced_data.get("EMAIL", "").strip()
        if pd.isna(replaced_email) or not replaced_email:
            replaced_email = "email_inconnu@exemple.com"
            
        replacing_email = replacing_data.get("EMAILR", "").strip()
        if pd.isna(replacing_email) or not replacing_email:
            replacing_email = "email_inconnu@exemple.com"

        # Cr√©ation d'une ligne pour la feuille CONTRAT
        new_row = [
            replaced_data["NOM"],
            replaced_data["PRENOM"],
            str(replaced_data["N ORDRE"]),
            replaced_email,
            replacing_data["NOMR"],
            replacing_data["PRENOMR"],
            str(replacing_data["N ORDRER"]),
            replacing_email,
            replacing_data["AdresseR"],
            str(replacing_data["URSSAF"]),
            start_date,
            end_date,
            sign_date,
            int(daily_fee)
        ]

        # Cr√©ation d'un DataFrame avec la structure de la feuille CONTRAT
        contrat_columns = [
            "NOM", "PRENOM", "N ORDRE", "EMAIL",
            "NOMR", "PRENOMR", "N ORDRER", "EMAILR",
            "AdresseR", "URSSAF", "DATEDEBUT", "DATEFIN", "DATESIGN", "forfait"
        ]
        contrat = pd.DataFrame([new_row], columns=contrat_columns)

        # Pr√©paration pour le publipostage
        word_file = file_paths["word_mar"]
        base_dir = os.path.dirname(word_file)
        excel_path = os.path.join(base_dir, "contrat_mars_selarl.xlsx")
        
        # Sauvegarde du fichier Excel temporaire
        save_to_new_excel(contrat, excel_path)

        # G√©n√©ration du contrat PDF
        pdf_path = perform_mail_merge(
            file_paths["word_mar"],
            replaced_name,
            replacing_name,
            start_date,
            os.path.expanduser(file_paths["pdf_mar"]),
            contract_type="MAR"
        )

        if not pdf_path or not os.path.exists(pdf_path):
            print(f"‚ùå Erreur : Le fichier PDF n'a pas pu √™tre g√©n√©r√©.")
            return

        print(f"‚úÖ Contrat g√©n√©r√© : {pdf_path}")

        # D√©sactivation des widgets du formulaire
        for widget in form_frame.winfo_children():
            if isinstance(widget, (tk.Entry, tk.Button, tk.OptionMenu)):
                widget.configure(state="disabled")
        
        # Vider le conteneur d'actions
        for widget in actions_container.winfo_children():
            widget.destroy()
        
        # Cr√©ation du conteneur pour les actions post-contrat
        title_label = tk.Label(actions_container, text="Actions sur le contrat", 
                            font=("Arial", 14, "bold"), bg="#4a90e2", fg="white")
        title_label.pack(fill="x", pady=10)
        
        # Information sur le contrat g√©n√©r√©
        info_text = f"Contrat g√©n√©r√© pour:\n{replacing_name}\nrempla√ßant {replaced_name}\ndu {start_date} au {end_date}"
        info_label = tk.Label(actions_container, text=info_text, justify=tk.LEFT, 
                            bg="#f5f5f5", padx=10, pady=5)
        info_label.pack(fill="x", pady=10)
        
        # Fonction pour ouvrir le PDF
        def open_pdf():
            subprocess.run(["open", "-a", "PDF Expert", pdf_path])
        
        # Bouton pour ouvrir le PDF
        open_button = tk.Button(actions_container, text="üìÑ Ouvrir avec PDF Expert", 
                            command=open_pdf, width=30)
        open_button.pack(pady=5)
        
        # Bouton pour envoyer √† DocuSign
        docusign_button = tk.Button(actions_container, text="üì© Envoyer en DocuSign", 
                            command=lambda: send_to_docusign(pdf_path, "MAR", start_date, end_date, 
                                                            replacing_name, replacing_email, 
                                                            replaced_name, replaced_email), 
                            width=30)
        docusign_button.pack(pady=5)
        
        # Bouton pour le r√®glement (d√©sactiv√©)
        pay_button = tk.Button(actions_container, text="üí∞ Effectuer le r√®glement (√† venir)", 
                            state="disabled", width=30)
        pay_button.pack(pady=5)
        
        # Bouton pour revenir √† l'√©cran d'accueil
        home_button = tk.Button(actions_container, text="üè† Retour √† l'accueil", 
                            command=lambda: [clear_right_frame(), show_welcome_image()], 
                            width=30)
        home_button.pack(pady=20)


   # Formulaire principal
    form_frame = tk.Frame(form_container, bg="#f0f4f7")
    form_frame.pack(pady=10, fill="x")
    
    # M√©decin remplac√©
    tk.Label(form_frame, text="M√©decin remplac√© :", bg="#f0f4f7").grid(row=0, column=0, sticky="w", pady=5)
    replaced_var = StringVar()
    tk.OptionMenu(form_frame, replaced_var, *mars_selarl["FULL_NAME"].tolist()).grid(row=0, column=1, sticky="w", padx=5, pady=5)
    
    # M√©decin rempla√ßant
    tk.Label(form_frame, text="M√©decin rempla√ßant :", bg="#f0f4f7").grid(row=1, column=0, sticky="w", pady=5)
    replacing_var = StringVar()
    tk.OptionMenu(form_frame, replacing_var, *mars_rempla["FULL_NAME"].tolist()).grid(row=1, column=1, sticky="w", padx=5, pady=5)
    
    # Bouton pour s√©lectionner les dates
    tk.Label(form_frame, text="Dates de d√©but et de fin :", bg="#f0f4f7").grid(row=2, column=0, sticky="w", pady=5)
    Button(form_frame, text="üìÖ S√©lectionner les dates", command=select_dates).grid(row=2, column=1, sticky="w", padx=5, pady=5)
    
    start_date_var = StringVar()
    end_date_var = StringVar()
    
    # Champ pour afficher la date de d√©but
    tk.Label(form_frame, text="Date de d√©but :", bg="#f0f4f7").grid(row=3, column=0, sticky="w", pady=5)
    Entry(form_frame, textvariable=start_date_var, state="readonly").grid(row=3, column=1, sticky="w", padx=5, pady=5)
    
    # Champ pour afficher la date de fin
    tk.Label(form_frame, text="Date de fin :", bg="#f0f4f7").grid(row=4, column=0, sticky="w", pady=5)
    Entry(form_frame, textvariable=end_date_var, state="readonly").grid(row=4, column=1, sticky="w", padx=5, pady=5)
    
    # Date de signature
    tk.Label(form_frame, text="Date de signature :", bg="#f0f4f7").grid(row=5, column=0, sticky="w", pady=5)
    sign_date_var = StringVar(value=datetime.today().strftime("%Y-%m-%d"))
    Entry(form_frame, textvariable=sign_date_var).grid(row=5, column=1, sticky="w", padx=5, pady=5)
    
    # Forfait journalier
    tk.Label(form_frame, text="Forfait journalier (‚Ç¨) :", bg="#f0f4f7").grid(row=6, column=0, sticky="w", pady=5)
    daily_fee_var = StringVar(value="1000")
    Entry(form_frame, textvariable=daily_fee_var).grid(row=6, column=1, sticky="w", padx=5, pady=5)
    
    # Bouton de cr√©ation
    Button(form_frame, text="Cr√©er le contrat", command=save_contract, 
           font=("Arial", 12, "bold"), bg="#007ACC", fg="black").grid(row=7, column=0, pady=10, padx=5, sticky="w")
    
    # Bouton de retour
    Button(form_frame, text="Annuler", command=lambda: [clear_right_frame(), show_welcome_image()], 
           font=("Arial", 10), bg="#f44336", fg="black").grid(row=7, column=1, pady=10, padx=5, sticky="w")
    
def open_accounting_menu():
    """Affiche le menu de gestion comptable dans le panneau droit."""
    clear_right_frame()  # Nettoie le panneau droit avant d'y ajouter de nouveaux √©l√©ments
    
    # Conteneur principal - utilisation d'un PanedWindow pour diviser l'espace
    main_container = tk.PanedWindow(right_frame, orient=tk.HORIZONTAL)
    main_container.pack(fill="both", expand=True)
    
    # Cadre gauche pour le menu comptabilit√© (m√™me largeur que le menu principal)
    compta_frame = tk.Frame(main_container, bg="#f0f4f7", padx=20, pady=20)
    main_container.add(compta_frame, width=300)  # M√™me largeur que left_frame
    
    # Cadre droit pour l'affichage des fonctionnalit√©s (initialement vide)
    content_container = tk.Frame(main_container, bg="#f5f5f5", padx=20, pady=20)
    main_container.add(content_container, width=900)  # Plus de place pour le contenu
    
    # Titre du menu
    tk.Label(compta_frame, text="üìä Menu Comptabilit√©", font=("Arial", 14, "bold"), 
             bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Boutons du menu comptabilit√©
    tk.Button(compta_frame, text="üìÑ Bulletins de salaire", 
              command=lambda: display_bulletins_in_container(content_container),
              width=25, bg="#DDDDDD", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=10)
    
    tk.Button(compta_frame, text="üìÇ Frais et factures", 
              command=lambda: display_factures_in_container(content_container), 
              width=25, bg="#DDDDDD", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=10)
    
    tk.Button(compta_frame, text="üí∞ Effectuer un virement", 
              command=lambda: display_transfer_in_container(content_container), 
              width=25, bg="#DDDDDD", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=10)
    
    tk.Button(compta_frame, text="üí∞ Virement r√©mun√©ration MARS", 
              command=lambda: display_virement_mar_in_container(content_container),
              width=25, bg="#DDDDDD", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=10)
    
    # Retour au menu principal
    tk.Button(compta_frame, text="üîô Retour au menu principal", 
              command=lambda: [clear_right_frame(), show_welcome_image()], 
              width=25, bg="#BBBBBB", fg="black", 
              font=("Arial", 10, "bold")).pack(pady=20)
    
    # Afficher un message d'accueil initial dans le conteneur de droite
    tk.Label(content_container, text="Bienvenue dans le module comptabilit√©", 
             font=("Arial", 16, "bold"), fg="#4a90e2", bg="#f5f5f5").pack(pady=20)
    tk.Label(content_container, text="Choisissez une option dans le menu de gauche.", 
             font=("Arial", 12), bg="#f5f5f5").pack(pady=10)


def display_bulletins_in_container(container):
    """Affiche les bulletins de salaire dans le conteneur sp√©cifi√©."""
    # Vider le conteneur
    for widget in container.winfo_children():
        widget.destroy()
    
    # Cr√©er un cadre pour les bulletins
    bulletins_frame = tk.Frame(container, bg="#f0f0f0")
    bulletins_frame.pack(fill="both", expand=True)
    
    # Importer la fonction du module bulletins
    from bulletins import show_bulletins_in_frame
    
    # Appeler la fonction avec le cadre cr√©√©
    show_bulletins_in_frame(bulletins_frame)


def display_factures_in_container(container):
    """Affiche une interface pour lancer l'analyse des factures."""
    # Vider le conteneur
    for widget in container.winfo_children():
        widget.destroy()
    
    # Cr√©er un frame pour l'analyse des factures
    factures_frame = tk.Frame(container, bg="#f5f5f5", padx=20, pady=20)
    factures_frame.pack(fill="both", expand=True)
    
    # Titre
    tk.Label(factures_frame, text="üìÇ Analyse des factures", 
             font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Description
    tk.Label(factures_frame, text="Cette fonction va lancer l'outil d'analyse des factures dans une fen√™tre s√©par√©e.", 
             font=("Arial", 12), bg="#f5f5f5").pack(pady=20)
    
    # Bouton pour lancer l'analyse
    tk.Button(factures_frame, text="üöÄ Lancer l'analyse des factures", 
              command=launch_facture_analysis,
              width=30, height=2, bg="#FFA500", fg="black", 
              font=("Arial", 12, "bold")).pack(pady=20)


def display_transfer_in_container(container):
    """Affiche le menu de virement dans le conteneur sp√©cifi√©."""
    # Vider le conteneur
    for widget in container.winfo_children():
        widget.destroy()
    
    # Cr√©er un frame pour le menu de virement
    transfer_frame = tk.Frame(container, bg="#f5f5f5", padx=20, pady=20)
    transfer_frame.pack(fill="both", expand=True)
    
    # Titre
    tk.Label(transfer_frame, text="üí∞ Effectuer un virement", 
             font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # Message d'instruction
    tk.Label(transfer_frame, text="Cette fonctionnalit√© permet d'effectuer des virements aux fournisseurs.",
             font=("Arial", 12), bg="#f5f5f5").pack(pady=20)
    
    # Bouton pour lancer la g√©n√©ration d'un virement
    tk.Button(transfer_frame, text="üîÑ G√©n√©rer un virement",
              command=lambda: open_virement_selection_window(),
              width=30, height=2, bg="#4CAF50", fg="black",
              font=("Arial", 12, "bold")).pack(pady=20)


def display_virement_mar_in_container(container):
    """Affiche le menu de virement pour les MARS dans le conteneur sp√©cifi√©."""
    # Vider le conteneur
    for widget in container.winfo_children():
        widget.destroy()
    
    # Cr√©er un frame pour le menu de virement MAR
    mar_frame = tk.Frame(container, bg="#f5f5f5", padx=20, pady=20)
    mar_frame.pack(fill="both", expand=True)
    
    # Titre
    tk.Label(mar_frame, text="üí∞ Virement r√©mun√©ration MARS", 
             font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    
    # R√©cup√©ration du fichier depuis le chemin configur√©
    excel_file = file_paths.get("chemin_fichier_virement", "")
    
    # Message d'instruction
    instruction_text = (
        "1Ô∏è‚É£ V√©rifiez attentivement chaque ligne des virements pr√©vus.\n"
        "2Ô∏è‚É£ Faites les modifications n√©cessaires.\n"
        "3Ô∏è‚É£ Cliquez sur 'Sauvegarder et Valider les virements'."
    )
    
    tk.Label(mar_frame, text=instruction_text, font=("Arial", 12), 
             bg="#f5f5f5", fg="black", justify="left").pack(pady=20, padx=20)
    
    # Bouton pour ouvrir le fichier Excel
    tk.Button(mar_frame, text="üìä Ouvrir le fichier Excel des virements", 
              command=lambda: subprocess.run(["open", "-a", "Microsoft Excel", excel_file], check=True) if os.path.exists(excel_file) else messagebox.showerror("Erreur", f"Le fichier {excel_file} est introuvable."),
              bg="#4682B4", fg="black", font=("Arial", 12, "bold"), width=30).pack(pady=10)
    
    # Bouton pour sauvegarder et valider les virements
    tk.Button(mar_frame, text="üíæ Sauvegarder et Valider les virements", 
              command=lambda: open_virement_selection_window(),
              bg="#4caf50", fg="black", font=("Arial", 12, "bold"), width=30).pack(pady=10)



def display_in_right_frame(function_to_display):
    """Fonction helper pour afficher une fonction dans le panneau droit"""
    global right_frame
    
    # On sauvegarde la fonction originale
    original_function = function_to_display
    
    # On d√©finit une nouvelle fonction qui va intercepter la fen√™tre toplevel
    def wrapped_function(*args, **kwargs):
        # Nettoyer le panneau droit
        for widget in right_frame.winfo_children():
            widget.destroy()
        
        # Cr√©er un cadre sp√©cial qui va servir de "fausse fen√™tre Toplevel"
        # pour la fonction d'origine
        fake_toplevel_frame = tk.Frame(right_frame, bg="#f0f0f0")
        fake_toplevel_frame.pack(fill="both", expand=True)
        
        # Stocke le cadre actuel pour les fonctions qui supposent √™tre dans une fen√™tre Toplevel
        original_function.__globals__['current_frame'] = fake_toplevel_frame
        
        # Appeler la fonction d'origine mais rediriger ses widgets dans notre cadre
        original_function(*args, **kwargs)
        
        # Ajouter un bouton de retour au menu comptabilit√©
        tk.Button(fake_toplevel_frame, text="üîô Retour au menu comptabilit√©", 
                  command=open_accounting_menu, 
                  bg="#B0C4DE", fg="black", 
                  font=("Arial", 10, "bold")).pack(pady=10)
    
    # Ex√©cuter notre fonction wrapper
    wrapped_function()

def launch_facture_analysis():
    """Lance le script analyse_facture.py dans un processus s√©par√©."""
    script_path = "/Users/vincentperreard/script contrats/analyse_facture.py"
    factures_path = get_file_path("dossier_factures", verify_exists=True)
    
    # DEBUGGING: Afficher le chemin utilis√©
    print("\n" + "="*50)
    print("üîç DEBUG - LANCEMENT ANALYSE FACTURES")
    print(f"üìÇ Chemin du script: {script_path}")
    print(f"üìÇ Chemin des factures trouv√©: {factures_path}")
    print("="*50 + "\n")
    
    try:
        if factures_path:
            # Passer le chemin comme argument avec --dossier
            cmd = ["python3", script_path, "--dossier", factures_path]
            print(f"üöÄ Ex√©cution de la commande: {' '.join(cmd)}")
            # Utiliser Popen pour ne pas bloquer l'interface
            subprocess.Popen(cmd)
        else:
            print("‚ö†Ô∏è Chemin des factures non trouv√©, utilisation du chemin par d√©faut.")
            subprocess.Popen(["python3", script_path])
            print("‚úÖ Analyse des factures lanc√©e avec succ√®s (chemin par d√©faut).")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution du script : {e}")
        messagebox.showerror("Erreur", f"Impossible de lancer l'analyse des factures : {e}")
        
def open_transfer_menu():
    """Ouvre le menu pour effectuer un virement."""
    messagebox.showinfo("Effectuer un virement", "Fonction √† impl√©menter : G√©n√©rer un virement.")


def open_virement_mar():
    """
    Ouvre le fichier Excel des virements et affiche une fen√™tre d'instruction.
    """
    # üìå R√©cup√©ration du fichier depuis le chemin configur√©
    excel_file = file_paths["chemin_fichier_virement"]    
    if not os.path.exists(excel_file):
        messagebox.showerror("Erreur", f"Le fichier des virements '{excel_file}' est introuvable.")
        return

    # üìå Ouvrir le fichier Excel sur la feuille "Virement"
    try:
        subprocess.run(["open", "-a", "Microsoft Excel", excel_file], check=True)
    except Exception as e:
        messagebox.showerror("Erreur", f"Impossible d'ouvrir Excel : {e}")
        return

    # üìå Cr√©ation de la fen√™tre d'instruction
    instruction_window = tk.Toplevel()
    instruction_window.title("üîπ Instructions pour les Virements MAR")
    instruction_window.geometry("500x300")
    instruction_window.configure(bg="#f2f7ff")

    # üìå Message d'instruction
    instruction_text = (
        "1Ô∏è‚É£ V√©rifiez attentivement chaque ligne des virements pr√©vus.\n"
        "2Ô∏è‚É£ Faites les modifications n√©cessaires.\n"
        "3Ô∏è‚É£ Cliquez sur 'Sauvegarder et Valider les virements'."
    )

    tk.Label(instruction_window, text="‚úÖ Instructions", font=("Arial", 14, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    tk.Label(instruction_window, text=instruction_text, font=("Arial", 12), bg="#f2f7ff", fg="black", justify="left").pack(pady=20, padx=20)

    def save_and_validate():
        """
        Sauvegarde le fichier Excel, ferme Excel et ouvre la s√©lection des virements.
        """
        try:
            # üìå Sauvegarde du fichier
            df = pd.read_excel(excel_file, sheet_name="Virement")
            with pd.ExcelWriter(excel_file, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
                df.to_excel(writer, sheet_name="Virement", index=False)

            # üìå Fermer Excel proprement via AppleScript
            applescript = """
            tell application "Microsoft Excel"
                if (count of windows) > 0 then
                    save active workbook
                    close active workbook
                end if
                quit
            end tell
            """
            subprocess.run(["osascript", "-e", applescript], check=True)

            # üìå Ouvrir la s√©lection des virements
            instruction_window.destroy()
            open_virement_selection_window()

        except Exception as e:
            messagebox.showerror("Erreur", f"Impossible de sauvegarder le fichier : {e}")

    # üìå Bouton "Sauvegarder et Valider"
    tk.Button(
        instruction_window, text="üíæ Sauvegarder et Valider les virements", command=save_and_validate,
        bg="#4caf50", fg="black", font=("Arial", 12, "bold"), width=30
    ).pack(pady=20)

    # üìå Bouton "Annuler"
    tk.Button(
        instruction_window, text="‚ùå Annuler", command=instruction_window.destroy,
        bg="#f44336", fg="black", font=("Arial", 12, "bold"), width=30
    ).pack(pady=10)

def open_virement_selection_window():
    """Ouvre la fen√™tre pour s√©lectionner les virements MAR √† traiter."""

    # üìå V√©rification du fichier des virements
    excel_file = file_paths.get("chemin_fichier_virement", "/Users/vincentperreard/Dropbox/SEL:SPFPL Mathilde/Compta SEL/compta SEL -rempla 2025.xlsx")
    
    if not os.path.exists(excel_file):
        messagebox.showerror("Erreur", f"Le fichier {excel_file} est introuvable.")
        return

    # üìå Chargement s√©curis√© des donn√©es
    try:
        df = pd.read_excel(excel_file, sheet_name="Virement")
    except Exception as e:
        messagebox.showerror("Erreur", f"Erreur lors de la lecture du fichier Excel : {e}")
        return

    # üìå V√©rifier les colonnes requises
    required_columns = ["Beneficiaire", "IBAN", "Date", "Reference", "Montant"]
    missing_columns = [col for col in required_columns if col not in df.columns]
    if missing_columns:
        messagebox.showerror("Erreur", f"Colonnes manquantes dans la feuille Virement : {', '.join(missing_columns)}")
        return

    # üìå Convertir les dates en datetime sans filtrage sp√©cifique √† mars 2025
    df["Date"] = pd.to_datetime(df["Date"], errors="coerce")
    
    # üìå Utilisation de tout le DataFrame sans filtre de date
    df_filtered = df
    
    # üìå V√©rifier si des virements sont pr√©sents
    if df_filtered.empty:
        messagebox.showwarning("Aucun virement", "Aucun virement trouv√© dans le fichier.")
        return
 
    # üìå Cr√©er la fen√™tre de s√©lection des virements
    virement_window = tk.Toplevel()
    virement_window.title("S√©lection des virements")
    virement_window.geometry("800x500")

    tk.Label(virement_window, text="S√©lectionnez les virements √† traiter", font=("Arial", 12, "bold")).pack(pady=10)

    # üìå Cr√©ation de la Treeview
    columns = ("B√©n√©ficiaire", "IBAN", "Date", "R√©f√©rence", "Montant")
    tree = ttk.Treeview(virement_window, columns=columns, show="headings", selectmode="extended")

    # üìå D√©finition des en-t√™tes
    for col in columns:
        tree.heading(col, text=col)
        tree.column(col, width=150)

    # üìå Ajout des donn√©es
    for _, row in df_filtered.iterrows():
        date_str = row["Date"].strftime("%Y-%m-%d") if pd.notna(row["Date"]) else "Date inconnue"
        tree.insert("", "end", values=(row["Beneficiaire"], row["IBAN"], date_str, row["Reference"], f"{row['Montant']:.2f}"))

    tree.pack(padx=10, pady=10, fill="both", expand=True)

    def generate_selected_virements():
        """G√©n√®re un fichier XML et ex√©cute le virement avec les donn√©es s√©lectionn√©es."""
        selected_items = tree.selection()
        if not selected_items:
            messagebox.showwarning("Avertissement", "Veuillez s√©lectionner au moins un virement.")
            return

        selected_virements = []
        execution_date = None
        
        for item in selected_items:
            values = tree.item(item, "values")
            # R√©cup√©rer la date d'ex√©cution du premier virement s√©lectionn√©
            if not execution_date and values[2] != "Date inconnue":
                try:
                    # Convertir au format YYYY-MM-DD
                    execution_date = values[2]
                except:
                    pass
                    
            selected_virements.append({
                "beneficiaire": values[0],
                "iban": values[1],
                "objet": f"{values[2]} - {values[3]}",  # Date + R√©f√©rence
                "montant": float(values[4])
            })

        # üìå G√©n√©rer le fichier XML avec la date d'ex√©cution sp√©cifi√©e
        fichier_xml = generer_xml_virements(selected_virements, date_execution=execution_date)
        if fichier_xml:
            # üî• Envoi du fichier XML pour ex√©cution du virement
            try:
                import generer_virement
                generer_virement.envoyer_virement_vers_lcl(fichier_xml)
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de l'envoi du virement : {e}")

            virement_window.destroy()
        else:
            messagebox.showerror("Erreur", "√âchec de la g√©n√©ration du fichier XML.")

    # üìå Bouton de validation
    tk.Button(virement_window, text="G√©n√©rer XML et R√©aliser Virement", command=generate_selected_virements, bg="#4caf50", fg="black", font=("Arial", 10, "bold")).pack(pady=10)
    
def planning():
    print ("Fonction en impl√©mentation")

def clear_right_frame():
    """Supprime tous les widgets du cadre droit avant d'en ajouter de nouveaux."""
    for widget in right_frame.winfo_children():
        widget.destroy()    



def main_menu():
    """Initialise l'interface et affiche le menu principal."""
    global root, left_frame, right_frame  # D√©finir ces variables globalement

    root = tk.Tk()
    root.title("Gestion des contrats")
    root.geometry("1500x1000")  # D√©finit une taille initiale
    root.configure(bg="#f2f7ff")

    # Cadre de gauche : Menu
    left_frame = Frame(root, bg="lightgray", width=200, height=500)
    left_frame.pack(side="left", fill="y")

    # Cadre de droite : Zone d'affichage dynamique
    right_frame = Frame(root, width=600, height=500)
    right_frame.pack(side="right", fill="both", expand=True)
    right_frame.pack_propagate(False)

    show_main_menu()  # Affiche le menu principal

    root.mainloop()


def show_main_menu():
    """Affiche le menu principal dans le cadre de gauche et affiche l‚Äôimage dans le cadre de droite."""
    # Effacer le contenu du menu de gauche
    for widget in left_frame.winfo_children():
        widget.destroy()

    # Cr√©ation des boutons du menu
    Label(left_frame, text="Menu principal", font=("Arial", 16, "bold"), bg="#4a90e2", fg="white").pack(fill="x", pady=10)
    Button(left_frame, text="üìã Nouveau contrat MAR", command=open_contract_creation_mar).pack(fill="x", pady=10)
    Button(left_frame, text="ü©∫ Nouveau contrat IADE", command=open_contract_creation_iade).pack(fill="x", pady=10)  # Ajout de l'emoji ü©∫
    Button(left_frame, text="üìä Comptabilit√©", command=open_accounting_menu).pack(fill="x", pady=10)
    Button(left_frame, text="üìÖ Plannings op√©ratoires", command=planning).pack(fill="x", pady=10)
    Button(left_frame, text="‚öôÔ∏è Param√®tres", command=open_parameters).pack(fill="x", pady=10)
    Button(left_frame, text="üö™ Quitter", command=root.destroy).pack(fill="x", pady=10)

    # Affichage de l'image dans le cadre droit
    show_welcome_image()



def show_welcome_image():
    """Affiche une image d'accueil avec un voile blanc semi-transparent."""
    global right_frame  # Acc√©der √† right_frame d√©fini dans main_menu()

    # Effacer le contenu existant
    for widget in right_frame.winfo_children():
        widget.destroy()

    image_path = "/Users/vincentperreard/script contrats/clinique_mathilde.png"

    if not os.path.exists(image_path):
        print(f"Image non trouv√©e: {image_path}")
        return
    
    try:
        original_image = Image.open(image_path).convert("RGBA")

        # V√©rifier la taille du cadre
        right_frame.update_idletasks()
        frame_width = right_frame.winfo_width()
        frame_height = right_frame.winfo_height()

        if frame_width <= 1 or frame_height <= 1:
            print("Le cadre right_frame n'a pas encore de dimensions valides.")
            return

        # Redimensionner l'image tout en conservant les proportions
        resized_image = original_image.resize((frame_width, frame_height), Image.Resampling.LANCZOS)

        # Cr√©er un calque blanc semi-transparent (30% d'opacit√©)
        overlay = Image.new("RGBA", resized_image.size, (255, 255, 255, 100))  # 100 = transparence l√©g√®re
        blended_image = Image.alpha_composite(resized_image, overlay)

        # Convertir pour affichage Tkinter
        image_tk = ImageTk.PhotoImage(blended_image)

        # Utilisation d'un Canvas pour placer l'image et futurs √©l√©ments
        canvas = Canvas(right_frame, width=frame_width, height=frame_height, bg="white", highlightthickness=0)
        canvas.pack(fill="both", expand=True)

        # Affichage de l'image avec le voile blanc
        canvas.create_image(frame_width // 2, frame_height // 2, image=image_tk, anchor="center")
        canvas.image = image_tk  # Conserver la r√©f√©rence

        # Ajout d'un titre exemple (modifiable)
        canvas.create_text(frame_width // 2, frame_height // 4, text="Bienvenue", font=("Arial", 24, "bold"), fill="black")

    except Exception as e:
        print(f"Erreur d'affichage de l'image : {e}")

if __name__ == "__main__":
    main_menu()